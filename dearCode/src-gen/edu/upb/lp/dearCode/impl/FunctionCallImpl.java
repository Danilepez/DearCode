/**
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.dearCode.impl;

import edu.upb.lp.dearCode.DearCodePackage;
import edu.upb.lp.dearCode.Expression;
import edu.upb.lp.dearCode.FunctionCall;
import edu.upb.lp.dearCode.MI_ID;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Function Call</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.upb.lp.dearCode.impl.FunctionCallImpl#getNameFuncion <em>Name Funcion</em>}</li>
 *   <li>{@link edu.upb.lp.dearCode.impl.FunctionCallImpl#getArgs <em>Args</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FunctionCallImpl extends ExpressionImpl implements FunctionCall
{
  /**
   * The cached value of the '{@link #getNameFuncion() <em>Name Funcion</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameFuncion()
   * @generated
   * @ordered
   */
  protected MI_ID nameFuncion;

  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EList<Expression> args;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FunctionCallImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DearCodePackage.Literals.FUNCTION_CALL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MI_ID getNameFuncion()
  {
    return nameFuncion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNameFuncion(MI_ID newNameFuncion, NotificationChain msgs)
  {
    MI_ID oldNameFuncion = nameFuncion;
    nameFuncion = newNameFuncion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DearCodePackage.FUNCTION_CALL__NAME_FUNCION, oldNameFuncion, newNameFuncion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNameFuncion(MI_ID newNameFuncion)
  {
    if (newNameFuncion != nameFuncion)
    {
      NotificationChain msgs = null;
      if (nameFuncion != null)
        msgs = ((InternalEObject)nameFuncion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DearCodePackage.FUNCTION_CALL__NAME_FUNCION, null, msgs);
      if (newNameFuncion != null)
        msgs = ((InternalEObject)newNameFuncion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DearCodePackage.FUNCTION_CALL__NAME_FUNCION, null, msgs);
      msgs = basicSetNameFuncion(newNameFuncion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DearCodePackage.FUNCTION_CALL__NAME_FUNCION, newNameFuncion, newNameFuncion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getArgs()
  {
    if (args == null)
    {
      args = new EObjectContainmentEList<Expression>(Expression.class, this, DearCodePackage.FUNCTION_CALL__ARGS);
    }
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DearCodePackage.FUNCTION_CALL__NAME_FUNCION:
        return basicSetNameFuncion(null, msgs);
      case DearCodePackage.FUNCTION_CALL__ARGS:
        return ((InternalEList<?>)getArgs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DearCodePackage.FUNCTION_CALL__NAME_FUNCION:
        return getNameFuncion();
      case DearCodePackage.FUNCTION_CALL__ARGS:
        return getArgs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DearCodePackage.FUNCTION_CALL__NAME_FUNCION:
        setNameFuncion((MI_ID)newValue);
        return;
      case DearCodePackage.FUNCTION_CALL__ARGS:
        getArgs().clear();
        getArgs().addAll((Collection<? extends Expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DearCodePackage.FUNCTION_CALL__NAME_FUNCION:
        setNameFuncion((MI_ID)null);
        return;
      case DearCodePackage.FUNCTION_CALL__ARGS:
        getArgs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DearCodePackage.FUNCTION_CALL__NAME_FUNCION:
        return nameFuncion != null;
      case DearCodePackage.FUNCTION_CALL__ARGS:
        return args != null && !args.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //FunctionCallImpl
