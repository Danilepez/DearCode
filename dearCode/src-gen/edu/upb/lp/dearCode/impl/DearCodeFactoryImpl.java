/**
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.dearCode.impl;

import edu.upb.lp.dearCode.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DearCodeFactoryImpl extends EFactoryImpl implements DearCodeFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DearCodeFactory init()
  {
    try
    {
      DearCodeFactory theDearCodeFactory = (DearCodeFactory)EPackage.Registry.INSTANCE.getEFactory(DearCodePackage.eNS_URI);
      if (theDearCodeFactory != null)
      {
        return theDearCodeFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DearCodeFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DearCodeFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DearCodePackage.PROGRAM: return createProgram();
      case DearCodePackage.CARTA: return createCarta();
      case DearCodePackage.SALUDO: return createSaludo();
      case DearCodePackage.DESPEDIDA: return createDespedida();
      case DearCodePackage.CUERPO: return createCuerpo();
      case DearCodePackage.INSTRUCCION: return createInstruccion();
      case DearCodePackage.DECLARAR: return createDeclarar();
      case DearCodePackage.REASIGNAR: return createReasignar();
      case DearCodePackage.ENTRADA: return createEntrada();
      case DearCodePackage.SALIDA: return createSalida();
      case DearCodePackage.ELEMENTO_BLOQUE: return createElementoBloque();
      case DearCodePackage.CONDICIONAL: return createCondicional();
      case DearCodePackage.BUCLE_WHILE: return createBucleWhile();
      case DearCodePackage.BUCLE_FOR: return createBucleFor();
      case DearCodePackage.FUNCION: return createFuncion();
      case DearCodePackage.RETURN: return createReturn();
      case DearCodePackage.EXPRESSION: return createExpression();
      case DearCodePackage.COMMENT: return createComment();
      case DearCodePackage.MI_ID: return createMI_ID();
      case DearCodePackage.OR_EXPRESSION: return createOrExpression();
      case DearCodePackage.AND_EXPRESSION: return createAndExpression();
      case DearCodePackage.EQUALITY_EXPRESSION: return createEqualityExpression();
      case DearCodePackage.RELATIONAL_EXPRESSION: return createRelationalExpression();
      case DearCodePackage.ADDITIVE_EXPRESSION: return createAdditiveExpression();
      case DearCodePackage.MULTIPLICATIVE_EXPRESSION: return createMultiplicativeExpression();
      case DearCodePackage.UNARY_EXPRESSION: return createUnaryExpression();
      case DearCodePackage.NUMBER_LITERAL: return createNumberLiteral();
      case DearCodePackage.STRING_LITERAL: return createStringLiteral();
      case DearCodePackage.BOOLEAN_LITERAL: return createBooleanLiteral();
      case DearCodePackage.VARIABLE_REFERENCE: return createVariableReference();
      case DearCodePackage.FUNCTION_CALL: return createFunctionCall();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Carta createCarta()
  {
    CartaImpl carta = new CartaImpl();
    return carta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Saludo createSaludo()
  {
    SaludoImpl saludo = new SaludoImpl();
    return saludo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Despedida createDespedida()
  {
    DespedidaImpl despedida = new DespedidaImpl();
    return despedida;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cuerpo createCuerpo()
  {
    CuerpoImpl cuerpo = new CuerpoImpl();
    return cuerpo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruccion createInstruccion()
  {
    InstruccionImpl instruccion = new InstruccionImpl();
    return instruccion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declarar createDeclarar()
  {
    DeclararImpl declarar = new DeclararImpl();
    return declarar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reasignar createReasignar()
  {
    ReasignarImpl reasignar = new ReasignarImpl();
    return reasignar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entrada createEntrada()
  {
    EntradaImpl entrada = new EntradaImpl();
    return entrada;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Salida createSalida()
  {
    SalidaImpl salida = new SalidaImpl();
    return salida;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementoBloque createElementoBloque()
  {
    ElementoBloqueImpl elementoBloque = new ElementoBloqueImpl();
    return elementoBloque;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condicional createCondicional()
  {
    CondicionalImpl condicional = new CondicionalImpl();
    return condicional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BucleWhile createBucleWhile()
  {
    BucleWhileImpl bucleWhile = new BucleWhileImpl();
    return bucleWhile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BucleFor createBucleFor()
  {
    BucleForImpl bucleFor = new BucleForImpl();
    return bucleFor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Funcion createFuncion()
  {
    FuncionImpl funcion = new FuncionImpl();
    return funcion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Return createReturn()
  {
    ReturnImpl return_ = new ReturnImpl();
    return return_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Comment createComment()
  {
    CommentImpl comment = new CommentImpl();
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MI_ID createMI_ID()
  {
    MI_IDImpl mI_ID = new MI_IDImpl();
    return mI_ID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpression createOrExpression()
  {
    OrExpressionImpl orExpression = new OrExpressionImpl();
    return orExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualityExpression createEqualityExpression()
  {
    EqualityExpressionImpl equalityExpression = new EqualityExpressionImpl();
    return equalityExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationalExpression createRelationalExpression()
  {
    RelationalExpressionImpl relationalExpression = new RelationalExpressionImpl();
    return relationalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdditiveExpression createAdditiveExpression()
  {
    AdditiveExpressionImpl additiveExpression = new AdditiveExpressionImpl();
    return additiveExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiplicativeExpression createMultiplicativeExpression()
  {
    MultiplicativeExpressionImpl multiplicativeExpression = new MultiplicativeExpressionImpl();
    return multiplicativeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryExpression createUnaryExpression()
  {
    UnaryExpressionImpl unaryExpression = new UnaryExpressionImpl();
    return unaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteral createBooleanLiteral()
  {
    BooleanLiteralImpl booleanLiteral = new BooleanLiteralImpl();
    return booleanLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableReference createVariableReference()
  {
    VariableReferenceImpl variableReference = new VariableReferenceImpl();
    return variableReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCall createFunctionCall()
  {
    FunctionCallImpl functionCall = new FunctionCallImpl();
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DearCodePackage getDearCodePackage()
  {
    return (DearCodePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DearCodePackage getPackage()
  {
    return DearCodePackage.eINSTANCE;
  }

} //DearCodeFactoryImpl
