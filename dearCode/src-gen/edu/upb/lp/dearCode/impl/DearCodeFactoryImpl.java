/**
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.dearCode.impl;

import edu.upb.lp.dearCode.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DearCodeFactoryImpl extends EFactoryImpl implements DearCodeFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DearCodeFactory init()
  {
    try
    {
      DearCodeFactory theDearCodeFactory = (DearCodeFactory)EPackage.Registry.INSTANCE.getEFactory(DearCodePackage.eNS_URI);
      if (theDearCodeFactory != null)
      {
        return theDearCodeFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DearCodeFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DearCodeFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DearCodePackage.PROGRAM: return createProgram();
      case DearCodePackage.CARTA: return createCarta();
      case DearCodePackage.SALUDO: return createSaludo();
      case DearCodePackage.DESPEDIDA: return createDespedida();
      case DearCodePackage.CUERPO: return createCuerpo();
      case DearCodePackage.INSTRUCCION: return createInstruccion();
      case DearCodePackage.DECLARAR: return createDeclarar();
      case DearCodePackage.REASIGNAR: return createReasignar();
      case DearCodePackage.VALOR: return createValor();
      case DearCodePackage.NUMERO_LITERAL: return createNumeroLiteral();
      case DearCodePackage.SIMPLE: return createSimple();
      case DearCodePackage.COMPUESTO: return createCompuesto();
      case DearCodePackage.MI_ID: return createMI_ID();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Carta createCarta()
  {
    CartaImpl carta = new CartaImpl();
    return carta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Saludo createSaludo()
  {
    SaludoImpl saludo = new SaludoImpl();
    return saludo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Despedida createDespedida()
  {
    DespedidaImpl despedida = new DespedidaImpl();
    return despedida;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cuerpo createCuerpo()
  {
    CuerpoImpl cuerpo = new CuerpoImpl();
    return cuerpo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruccion createInstruccion()
  {
    InstruccionImpl instruccion = new InstruccionImpl();
    return instruccion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declarar createDeclarar()
  {
    DeclararImpl declarar = new DeclararImpl();
    return declarar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reasignar createReasignar()
  {
    ReasignarImpl reasignar = new ReasignarImpl();
    return reasignar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Valor createValor()
  {
    ValorImpl valor = new ValorImpl();
    return valor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumeroLiteral createNumeroLiteral()
  {
    NumeroLiteralImpl numeroLiteral = new NumeroLiteralImpl();
    return numeroLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Simple createSimple()
  {
    SimpleImpl simple = new SimpleImpl();
    return simple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Compuesto createCompuesto()
  {
    CompuestoImpl compuesto = new CompuestoImpl();
    return compuesto;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MI_ID createMI_ID()
  {
    MI_IDImpl mI_ID = new MI_IDImpl();
    return mI_ID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DearCodePackage getDearCodePackage()
  {
    return (DearCodePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DearCodePackage getPackage()
  {
    return DearCodePackage.eINSTANCE;
  }

} //DearCodeFactoryImpl
