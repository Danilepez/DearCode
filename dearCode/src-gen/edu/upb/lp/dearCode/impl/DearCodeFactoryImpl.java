/**
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.dearCode.impl;

import edu.upb.lp.dearCode.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DearCodeFactoryImpl extends EFactoryImpl implements DearCodeFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DearCodeFactory init()
  {
    try
    {
      DearCodeFactory theDearCodeFactory = (DearCodeFactory)EPackage.Registry.INSTANCE.getEFactory(DearCodePackage.eNS_URI);
      if (theDearCodeFactory != null)
      {
        return theDearCodeFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DearCodeFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DearCodeFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DearCodePackage.PROGRAM: return createProgram();
      case DearCodePackage.CARTA: return createCarta();
      case DearCodePackage.SALUDO: return createSaludo();
      case DearCodePackage.DESPEDIDA: return createDespedida();
      case DearCodePackage.CUERPO: return createCuerpo();
      case DearCodePackage.INSTRUCCION: return createInstruccion();
      case DearCodePackage.DECLARAR: return createDeclarar();
      case DearCodePackage.REASIGNAR: return createReasignar();
      case DearCodePackage.ENTRADA: return createEntrada();
      case DearCodePackage.SALIDA: return createSalida();
      case DearCodePackage.VALOR: return createValor();
      case DearCodePackage.NUMERO_LITERAL: return createNumeroLiteral();
      case DearCodePackage.SIMPLE: return createSimple();
      case DearCodePackage.COMPUESTO: return createCompuesto();
      case DearCodePackage.MI_ID: return createMI_ID();
      case DearCodePackage.CONDICION: return createCondicion();
      case DearCodePackage.EXPRESSION: return createExpression();
      case DearCodePackage.INT_LITERAL: return createIntLiteral();
      case DearCodePackage.STRING_LITERAL: return createStringLiteral();
      case DearCodePackage.BOOLEAN_LITERAL: return createBooleanLiteral();
      case DearCodePackage.VARIABLE_REF: return createVariableRef();
      case DearCodePackage.CONDICIONAL: return createCondicional();
      case DearCodePackage.BUCLE_WHILE: return createBucleWhile();
      case DearCodePackage.BUCLE_FOR: return createBucleFor();
      case DearCodePackage.FUNCION: return createFuncion();
      case DearCodePackage.OR_EXPR: return createOrExpr();
      case DearCodePackage.AND_EXPR: return createAndExpr();
      case DearCodePackage.EQUALITY_EXPR: return createEqualityExpr();
      case DearCodePackage.BINARY_RELATION: return createBinaryRelation();
      case DearCodePackage.ADDITIVE_EXPR: return createAdditiveExpr();
      case DearCodePackage.MULTIPLICATIVE_EXPR: return createMultiplicativeExpr();
      case DearCodePackage.NOT_EXPR: return createNotExpr();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Carta createCarta()
  {
    CartaImpl carta = new CartaImpl();
    return carta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Saludo createSaludo()
  {
    SaludoImpl saludo = new SaludoImpl();
    return saludo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Despedida createDespedida()
  {
    DespedidaImpl despedida = new DespedidaImpl();
    return despedida;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cuerpo createCuerpo()
  {
    CuerpoImpl cuerpo = new CuerpoImpl();
    return cuerpo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruccion createInstruccion()
  {
    InstruccionImpl instruccion = new InstruccionImpl();
    return instruccion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declarar createDeclarar()
  {
    DeclararImpl declarar = new DeclararImpl();
    return declarar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reasignar createReasignar()
  {
    ReasignarImpl reasignar = new ReasignarImpl();
    return reasignar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entrada createEntrada()
  {
    EntradaImpl entrada = new EntradaImpl();
    return entrada;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Salida createSalida()
  {
    SalidaImpl salida = new SalidaImpl();
    return salida;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Valor createValor()
  {
    ValorImpl valor = new ValorImpl();
    return valor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumeroLiteral createNumeroLiteral()
  {
    NumeroLiteralImpl numeroLiteral = new NumeroLiteralImpl();
    return numeroLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Simple createSimple()
  {
    SimpleImpl simple = new SimpleImpl();
    return simple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Compuesto createCompuesto()
  {
    CompuestoImpl compuesto = new CompuestoImpl();
    return compuesto;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MI_ID createMI_ID()
  {
    MI_IDImpl mI_ID = new MI_IDImpl();
    return mI_ID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condicion createCondicion()
  {
    CondicionImpl condicion = new CondicionImpl();
    return condicion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteral createBooleanLiteral()
  {
    BooleanLiteralImpl booleanLiteral = new BooleanLiteralImpl();
    return booleanLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableRef createVariableRef()
  {
    VariableRefImpl variableRef = new VariableRefImpl();
    return variableRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condicional createCondicional()
  {
    CondicionalImpl condicional = new CondicionalImpl();
    return condicional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BucleWhile createBucleWhile()
  {
    BucleWhileImpl bucleWhile = new BucleWhileImpl();
    return bucleWhile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BucleFor createBucleFor()
  {
    BucleForImpl bucleFor = new BucleForImpl();
    return bucleFor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Funcion createFuncion()
  {
    FuncionImpl funcion = new FuncionImpl();
    return funcion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpr createOrExpr()
  {
    OrExprImpl orExpr = new OrExprImpl();
    return orExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpr createAndExpr()
  {
    AndExprImpl andExpr = new AndExprImpl();
    return andExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualityExpr createEqualityExpr()
  {
    EqualityExprImpl equalityExpr = new EqualityExprImpl();
    return equalityExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinaryRelation createBinaryRelation()
  {
    BinaryRelationImpl binaryRelation = new BinaryRelationImpl();
    return binaryRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdditiveExpr createAdditiveExpr()
  {
    AdditiveExprImpl additiveExpr = new AdditiveExprImpl();
    return additiveExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiplicativeExpr createMultiplicativeExpr()
  {
    MultiplicativeExprImpl multiplicativeExpr = new MultiplicativeExprImpl();
    return multiplicativeExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotExpr createNotExpr()
  {
    NotExprImpl notExpr = new NotExprImpl();
    return notExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DearCodePackage getDearCodePackage()
  {
    return (DearCodePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DearCodePackage getPackage()
  {
    return DearCodePackage.eINSTANCE;
  }

} //DearCodeFactoryImpl
