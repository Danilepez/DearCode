/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.serializer;

import com.google.inject.Inject;
import edu.upb.lp.dearCode.Carta;
import edu.upb.lp.dearCode.Compuesto;
import edu.upb.lp.dearCode.Cuerpo;
import edu.upb.lp.dearCode.DearCodePackage;
import edu.upb.lp.dearCode.Declarar;
import edu.upb.lp.dearCode.Despedida;
import edu.upb.lp.dearCode.MI_ID;
import edu.upb.lp.dearCode.Program;
import edu.upb.lp.dearCode.Reasignar;
import edu.upb.lp.dearCode.Saludo;
import edu.upb.lp.dearCode.Simple;
import edu.upb.lp.services.DearCodeGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DearCodeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DearCodeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DearCodePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DearCodePackage.CARTA:
				sequence_Carta(context, (Carta) semanticObject); 
				return; 
			case DearCodePackage.COMPUESTO:
				sequence_Compuesto(context, (Compuesto) semanticObject); 
				return; 
			case DearCodePackage.CUERPO:
				sequence_Cuerpo(context, (Cuerpo) semanticObject); 
				return; 
			case DearCodePackage.DECLARAR:
				sequence_Declarar(context, (Declarar) semanticObject); 
				return; 
			case DearCodePackage.DESPEDIDA:
				sequence_Despedida(context, (Despedida) semanticObject); 
				return; 
			case DearCodePackage.MI_ID:
				sequence_MI_ID(context, (MI_ID) semanticObject); 
				return; 
			case DearCodePackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case DearCodePackage.REASIGNAR:
				sequence_Reasignar(context, (Reasignar) semanticObject); 
				return; 
			case DearCodePackage.SALUDO:
				sequence_Saludo(context, (Saludo) semanticObject); 
				return; 
			case DearCodePackage.SIMPLE:
				sequence_Simple(context, (Simple) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Carta returns Carta
	 *
	 * Constraint:
	 *     (saludo=Saludo cuerpo=Cuerpo despedida=Despedida)
	 * </pre>
	 */
	protected void sequence_Carta(ISerializationContext context, Carta semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DearCodePackage.Literals.CARTA__SALUDO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DearCodePackage.Literals.CARTA__SALUDO));
			if (transientValues.isValueTransient(semanticObject, DearCodePackage.Literals.CARTA__CUERPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DearCodePackage.Literals.CARTA__CUERPO));
			if (transientValues.isValueTransient(semanticObject, DearCodePackage.Literals.CARTA__DESPEDIDA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DearCodePackage.Literals.CARTA__DESPEDIDA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCartaAccess().getSaludoSaludoParserRuleCall_0_0(), semanticObject.getSaludo());
		feeder.accept(grammarAccess.getCartaAccess().getCuerpoCuerpoParserRuleCall_1_0(), semanticObject.getCuerpo());
		feeder.accept(grammarAccess.getCartaAccess().getDespedidaDespedidaParserRuleCall_2_0(), semanticObject.getDespedida());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Valor returns Compuesto
	 *     NumeroLiteral returns Compuesto
	 *     Compuesto returns Compuesto
	 *
	 * Constraint:
	 *     (cantidad=Simple multiplicador=Multiplicador resto=Simple?)
	 * </pre>
	 */
	protected void sequence_Compuesto(ISerializationContext context, Compuesto semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Cuerpo returns Cuerpo
	 *
	 * Constraint:
	 *     instrucciones+=Instruccion+
	 * </pre>
	 */
	protected void sequence_Cuerpo(ISerializationContext context, Cuerpo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruccion returns Declarar
	 *     Declarar returns Declarar
	 *
	 * Constraint:
	 *     (verboDecl=VerboDeclaracion articulo=Articulo valor=Valor sustantivo=MI_ID (comentario=ANYTEXT | comentario=STRING)?)
	 * </pre>
	 */
	protected void sequence_Declarar(ISerializationContext context, Declarar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Despedida returns Despedida
	 *
	 * Constraint:
	 *     name=ANYTEXT
	 * </pre>
	 */
	protected void sequence_Despedida(ISerializationContext context, Despedida semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DearCodePackage.Literals.DESPEDIDA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DearCodePackage.Literals.DESPEDIDA__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDespedidaAccess().getNameANYTEXTTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Valor returns MI_ID
	 *     MI_ID returns MI_ID
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_MI_ID(ISerializationContext context, MI_ID semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DearCodePackage.Literals.MI_ID__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DearCodePackage.Literals.MI_ID__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMI_IDAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     cartas+=Carta+
	 * </pre>
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruccion returns Reasignar
	 *     Reasignar returns Reasignar
	 *
	 * Constraint:
	 *     (verboReas=VerboReasignacion sustantivo=MI_ID valor=Valor (comentario=ANYTEXT | comentario=STRING)?)
	 * </pre>
	 */
	protected void sequence_Reasignar(ISerializationContext context, Reasignar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Saludo returns Saludo
	 *
	 * Constraint:
	 *     name=ANYTEXT
	 * </pre>
	 */
	protected void sequence_Saludo(ISerializationContext context, Saludo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DearCodePackage.Literals.SALUDO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DearCodePackage.Literals.SALUDO__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSaludoAccess().getNameANYTEXTTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Valor returns Simple
	 *     NumeroLiteral returns Simple
	 *     Simple returns Simple
	 *
	 * Constraint:
	 *     (
	 *         value='cero' | 
	 *         value='uno' | 
	 *         value='dos' | 
	 *         value='tres' | 
	 *         value='cuatro' | 
	 *         value='cinco' | 
	 *         value='seis' | 
	 *         value='siete' | 
	 *         value='ocho' | 
	 *         value='nueve'
	 *     )
	 * </pre>
	 */
	protected void sequence_Simple(ISerializationContext context, Simple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
