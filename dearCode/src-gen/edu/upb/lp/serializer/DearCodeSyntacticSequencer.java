/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.serializer;

import com.google.inject.Inject;
import edu.upb.lp.services.DearCodeGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DearCodeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DearCodeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AdditiveExpr_FundidosEnLaLlamaDeKeyword_1_1_1_or_UnidosEnUnSoloSuspiroConKeyword_1_1_0;
	protected AbstractElementAlias match_BucleFor_CadaDiaDesdeKeyword_0_0_or_PorCadaSuspiroDesdeKeyword_0_1;
	protected AbstractElementAlias match_BucleWhile_MientrasANSueEsConEsteMomentoHazQueOcurraKeyword_0_1_or_MientrasAunMePiensesKeyword_0_0;
	protected AbstractElementAlias match_Condicional_SiEnTuAlmaNaceElDeseoDeQueKeyword_0_1_or_SiEnTuCorazonSientesQueKeyword_0_0;
	protected AbstractElementAlias match_EqualityExpr_CantaConUnMatizDistintoAKeyword_1_1_1_or_LateAlUnSonoConKeyword_1_1_0;
	protected AbstractElementAlias match_MultiplicativeExpr_FortalecidosPorElFuegoDeKeyword_1_1_0_or_SeparadosEntreLosEcosDeKeyword_1_1_1;
	protected AbstractElementAlias match_PrimaryExpr_LeftParenthesisKeyword_3_0_a;
	protected AbstractElementAlias match_PrimaryExpr_LeftParenthesisKeyword_3_0_p;
	protected AbstractElementAlias match_RelationalExpr_ArdeConMasPasionQueKeyword_1_1_1_or_SusurraConMenosFuerzaQueKeyword_1_1_0;
	protected AbstractElementAlias match_SpecialBoolean_ANMePiensasKeyword_0_or_TuVozMeAlcanzaKeyword_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DearCodeGrammarAccess) access;
		match_AdditiveExpr_FundidosEnLaLlamaDeKeyword_1_1_1_or_UnidosEnUnSoloSuspiroConKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAdditiveExprAccess().getFundidosEnLaLlamaDeKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getAdditiveExprAccess().getUnidosEnUnSoloSuspiroConKeyword_1_1_0()));
		match_BucleFor_CadaDiaDesdeKeyword_0_0_or_PorCadaSuspiroDesdeKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBucleForAccess().getCadaDiaDesdeKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getBucleForAccess().getPorCadaSuspiroDesdeKeyword_0_1()));
		match_BucleWhile_MientrasANSueEsConEsteMomentoHazQueOcurraKeyword_0_1_or_MientrasAunMePiensesKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBucleWhileAccess().getMientrasANSueEsConEsteMomentoHazQueOcurraKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getBucleWhileAccess().getMientrasAunMePiensesKeyword_0_0()));
		match_Condicional_SiEnTuAlmaNaceElDeseoDeQueKeyword_0_1_or_SiEnTuCorazonSientesQueKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCondicionalAccess().getSiEnTuAlmaNaceElDeseoDeQueKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getCondicionalAccess().getSiEnTuCorazonSientesQueKeyword_0_0()));
		match_EqualityExpr_CantaConUnMatizDistintoAKeyword_1_1_1_or_LateAlUnSonoConKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEqualityExprAccess().getCantaConUnMatizDistintoAKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getEqualityExprAccess().getLateAlUnSonoConKeyword_1_1_0()));
		match_MultiplicativeExpr_FortalecidosPorElFuegoDeKeyword_1_1_0_or_SeparadosEntreLosEcosDeKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMultiplicativeExprAccess().getFortalecidosPorElFuegoDeKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getMultiplicativeExprAccess().getSeparadosEntreLosEcosDeKeyword_1_1_1()));
		match_PrimaryExpr_LeftParenthesisKeyword_3_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_3_0());
		match_PrimaryExpr_LeftParenthesisKeyword_3_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_3_0());
		match_RelationalExpr_ArdeConMasPasionQueKeyword_1_1_1_or_SusurraConMenosFuerzaQueKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRelationalExprAccess().getArdeConMasPasionQueKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getRelationalExprAccess().getSusurraConMenosFuerzaQueKeyword_1_1_0()));
		match_SpecialBoolean_ANMePiensasKeyword_0_or_TuVozMeAlcanzaKeyword_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSpecialBooleanAccess().getANMePiensasKeyword_0()), new TokenAlias(false, false, grammarAccess.getSpecialBooleanAccess().getTuVozMeAlcanzaKeyword_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AdditiveExpr_FundidosEnLaLlamaDeKeyword_1_1_1_or_UnidosEnUnSoloSuspiroConKeyword_1_1_0.equals(syntax))
				emit_AdditiveExpr_FundidosEnLaLlamaDeKeyword_1_1_1_or_UnidosEnUnSoloSuspiroConKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BucleFor_CadaDiaDesdeKeyword_0_0_or_PorCadaSuspiroDesdeKeyword_0_1.equals(syntax))
				emit_BucleFor_CadaDiaDesdeKeyword_0_0_or_PorCadaSuspiroDesdeKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BucleWhile_MientrasANSueEsConEsteMomentoHazQueOcurraKeyword_0_1_or_MientrasAunMePiensesKeyword_0_0.equals(syntax))
				emit_BucleWhile_MientrasANSueEsConEsteMomentoHazQueOcurraKeyword_0_1_or_MientrasAunMePiensesKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Condicional_SiEnTuAlmaNaceElDeseoDeQueKeyword_0_1_or_SiEnTuCorazonSientesQueKeyword_0_0.equals(syntax))
				emit_Condicional_SiEnTuAlmaNaceElDeseoDeQueKeyword_0_1_or_SiEnTuCorazonSientesQueKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EqualityExpr_CantaConUnMatizDistintoAKeyword_1_1_1_or_LateAlUnSonoConKeyword_1_1_0.equals(syntax))
				emit_EqualityExpr_CantaConUnMatizDistintoAKeyword_1_1_1_or_LateAlUnSonoConKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MultiplicativeExpr_FortalecidosPorElFuegoDeKeyword_1_1_0_or_SeparadosEntreLosEcosDeKeyword_1_1_1.equals(syntax))
				emit_MultiplicativeExpr_FortalecidosPorElFuegoDeKeyword_1_1_0_or_SeparadosEntreLosEcosDeKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpr_LeftParenthesisKeyword_3_0_a.equals(syntax))
				emit_PrimaryExpr_LeftParenthesisKeyword_3_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpr_LeftParenthesisKeyword_3_0_p.equals(syntax))
				emit_PrimaryExpr_LeftParenthesisKeyword_3_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelationalExpr_ArdeConMasPasionQueKeyword_1_1_1_or_SusurraConMenosFuerzaQueKeyword_1_1_0.equals(syntax))
				emit_RelationalExpr_ArdeConMasPasionQueKeyword_1_1_1_or_SusurraConMenosFuerzaQueKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SpecialBoolean_ANMePiensasKeyword_0_or_TuVozMeAlcanzaKeyword_1.equals(syntax))
				emit_SpecialBoolean_ANMePiensasKeyword_0_or_TuVozMeAlcanzaKeyword_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'unidos en un solo suspiro con' | 'fundidos en la llama de'
	 *
	 * This ambiguous syntax occurs at:
	 *     {AdditiveExpr.left=} (ambiguity) right=MultiplicativeExpr
	 
	 * </pre>
	 */
	protected void emit_AdditiveExpr_FundidosEnLaLlamaDeKeyword_1_1_1_or_UnidosEnUnSoloSuspiroConKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Cada dia, desde' | 'Por cada suspiro desde'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) condicion=Condicion
	 
	 * </pre>
	 */
	protected void emit_BucleFor_CadaDiaDesdeKeyword_0_0_or_PorCadaSuspiroDesdeKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Mientras aun me pienses' | 'Mientras aún sueñes con este momento, haz que ocurra'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) condicion=Condicion
	 
	 * </pre>
	 */
	protected void emit_BucleWhile_MientrasANSueEsConEsteMomentoHazQueOcurraKeyword_0_1_or_MientrasAunMePiensesKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Si en tu corazon sientes que' | 'Si en tu alma nace el deseo de que'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) condicion=Condicion
	 
	 * </pre>
	 */
	protected void emit_Condicional_SiEnTuAlmaNaceElDeseoDeQueKeyword_0_1_or_SiEnTuCorazonSientesQueKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'late al unísono con' | 'canta con un matiz distinto a'
	 *
	 * This ambiguous syntax occurs at:
	 *     {EqualityExpr.left=} (ambiguity) right=RelationalExpr
	 
	 * </pre>
	 */
	protected void emit_EqualityExpr_CantaConUnMatizDistintoAKeyword_1_1_1_or_LateAlUnSonoConKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'fortalecidos por el fuego de' | 'Separados entre los ecos de'
	 *
	 * This ambiguous syntax occurs at:
	 *     {MultiplicativeExpr.left=} (ambiguity) right=UnaryExpr
	 
	 * </pre>
	 */
	protected void emit_MultiplicativeExpr_FortalecidosPorElFuegoDeKeyword_1_1_0_or_SeparadosEntreLosEcosDeKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'no lo creo' expr=PrimaryExpr
	 *     (rule start) (ambiguity) ('aún me piensas' | 'tu voz me alcanza') (rule start)
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) value='jamás'
	 *     (rule start) (ambiguity) value='siempre'
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {AdditiveExpr.left=}
	 *     (rule start) (ambiguity) {AndExpr.left=}
	 *     (rule start) (ambiguity) {EqualityExpr.left=}
	 *     (rule start) (ambiguity) {MultiplicativeExpr.left=}
	 *     (rule start) (ambiguity) {OrExpr.left=}
	 *     (rule start) (ambiguity) {RelationalExpr.left=}
	 
	 * </pre>
	 */
	protected void emit_PrimaryExpr_LeftParenthesisKeyword_3_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'no lo creo' expr=PrimaryExpr
	 *     (rule start) (ambiguity) {AdditiveExpr.left=}
	 *     (rule start) (ambiguity) {AndExpr.left=}
	 *     (rule start) (ambiguity) {EqualityExpr.left=}
	 *     (rule start) (ambiguity) {MultiplicativeExpr.left=}
	 *     (rule start) (ambiguity) {OrExpr.left=}
	 *     (rule start) (ambiguity) {RelationalExpr.left=}
	 
	 * </pre>
	 */
	protected void emit_PrimaryExpr_LeftParenthesisKeyword_3_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'susurra con menos fuerza que ' | 'arde con mas pasion que'
	 *
	 * This ambiguous syntax occurs at:
	 *     {RelationalExpr.left=} (ambiguity) right=AdditiveExpr
	 
	 * </pre>
	 */
	protected void emit_RelationalExpr_ArdeConMasPasionQueKeyword_1_1_1_or_SusurraConMenosFuerzaQueKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'aún me piensas' | 'tu voz me alcanza'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_SpecialBoolean_ANMePiensasKeyword_0_or_TuVozMeAlcanzaKeyword_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
