/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.serializer;

import com.google.inject.Inject;
import edu.upb.lp.services.DearCodeGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DearCodeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DearCodeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AndExpression_YTambiNKeyword_1_1_0_or_YTambiNKeyword_1_1_1;
	protected AbstractElementAlias match_BucleWhile_MientrasANSueEsConEsteMomentoKeyword_0_1_or_MientrasAunMePiensasKeyword_0_0;
	protected AbstractElementAlias match_Entrada___ConPalabrasDeTerciopeloKeyword_2_1_or_EnUnSusurroNumRicoKeyword_2_0__q;
	protected AbstractElementAlias match_Funcion_DejoEnEstasLNeasUnaPromesaLlamadaKeyword_0_0_or_EnLaBrisaEscondoUnDeseoLlamadoKeyword_0_2_or_EscriboEnEstasLNeasUnaIntenciNLlamadaKeyword_0_1;
	protected AbstractElementAlias match_OrExpression_OQuizSKeyword_1_1_0_or_OQuizSKeyword_1_1_1;
	protected AbstractElementAlias match_PrimaryExpression_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_PrimaryExpression_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_Saludo_QueridaKeyword_0_1_or_QueridoKeyword_0_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DearCodeGrammarAccess) access;
		match_AndExpression_YTambiNKeyword_1_1_0_or_YTambiNKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAndExpressionAccess().getYTambiNKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getAndExpressionAccess().getYTambiNKeyword_1_1_1()));
		match_BucleWhile_MientrasANSueEsConEsteMomentoKeyword_0_1_or_MientrasAunMePiensasKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBucleWhileAccess().getMientrasANSueEsConEsteMomentoKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getBucleWhileAccess().getMientrasAunMePiensasKeyword_0_0()));
		match_Entrada___ConPalabrasDeTerciopeloKeyword_2_1_or_EnUnSusurroNumRicoKeyword_2_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getEntradaAccess().getConPalabrasDeTerciopeloKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getEntradaAccess().getEnUnSusurroNumRicoKeyword_2_0()));
		match_Funcion_DejoEnEstasLNeasUnaPromesaLlamadaKeyword_0_0_or_EnLaBrisaEscondoUnDeseoLlamadoKeyword_0_2_or_EscriboEnEstasLNeasUnaIntenciNLlamadaKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFuncionAccess().getDejoEnEstasLNeasUnaPromesaLlamadaKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getFuncionAccess().getEnLaBrisaEscondoUnDeseoLlamadoKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getFuncionAccess().getEscriboEnEstasLNeasUnaIntenciNLlamadaKeyword_0_1()));
		match_OrExpression_OQuizSKeyword_1_1_0_or_OQuizSKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOrExpressionAccess().getOQuizSKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getOrExpressionAccess().getOQuizSKeyword_1_1_1()));
		match_PrimaryExpression_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
		match_PrimaryExpression_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
		match_Saludo_QueridaKeyword_0_1_or_QueridoKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSaludoAccess().getQueridaKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSaludoAccess().getQueridoKeyword_0_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AndExpression_YTambiNKeyword_1_1_0_or_YTambiNKeyword_1_1_1.equals(syntax))
				emit_AndExpression_YTambiNKeyword_1_1_0_or_YTambiNKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BucleWhile_MientrasANSueEsConEsteMomentoKeyword_0_1_or_MientrasAunMePiensasKeyword_0_0.equals(syntax))
				emit_BucleWhile_MientrasANSueEsConEsteMomentoKeyword_0_1_or_MientrasAunMePiensasKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Entrada___ConPalabrasDeTerciopeloKeyword_2_1_or_EnUnSusurroNumRicoKeyword_2_0__q.equals(syntax))
				emit_Entrada___ConPalabrasDeTerciopeloKeyword_2_1_or_EnUnSusurroNumRicoKeyword_2_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Funcion_DejoEnEstasLNeasUnaPromesaLlamadaKeyword_0_0_or_EnLaBrisaEscondoUnDeseoLlamadoKeyword_0_2_or_EscriboEnEstasLNeasUnaIntenciNLlamadaKeyword_0_1.equals(syntax))
				emit_Funcion_DejoEnEstasLNeasUnaPromesaLlamadaKeyword_0_0_or_EnLaBrisaEscondoUnDeseoLlamadoKeyword_0_2_or_EscriboEnEstasLNeasUnaIntenciNLlamadaKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OrExpression_OQuizSKeyword_1_1_0_or_OQuizSKeyword_1_1_1.equals(syntax))
				emit_OrExpression_OQuizSKeyword_1_1_0_or_OQuizSKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_PrimaryExpression_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_PrimaryExpression_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Saludo_QueridaKeyword_0_1_or_QueridoKeyword_0_0.equals(syntax))
				emit_Saludo_QueridaKeyword_0_1_or_QueridoKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ' y también ' | ' y también'
	 *
	 * This ambiguous syntax occurs at:
	 *     {AndExpression.left=} (ambiguity) right=EqualityExpression
	 
	 * </pre>
	 */
	protected void emit_AndExpression_YTambiNKeyword_1_1_0_or_YTambiNKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Mientras aun me piensas' | 'Mientras aún sueñes con este momento'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) condicion=Expression
	 
	 * </pre>
	 */
	protected void emit_BucleWhile_MientrasANSueEsConEsteMomentoKeyword_0_1_or_MientrasAunMePiensasKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('en un susurro numérico' | 'con palabras de terciopelo')?
	 *
	 * This ambiguous syntax occurs at:
	 *     variable=MI_ID (ambiguity) '.' (rule end)
	 
	 * </pre>
	 */
	protected void emit_Entrada___ConPalabrasDeTerciopeloKeyword_2_1_or_EnUnSusurroNumRicoKeyword_2_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Dejo en estas líneas una promesa llamada' | 'Escribo en estas líneas una intención llamada' | 'En la brisa escondo un deseo llamado'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=MI_ID
	 
	 * </pre>
	 */
	protected void emit_Funcion_DejoEnEstasLNeasUnaPromesaLlamadaKeyword_0_0_or_EnLaBrisaEscondoUnDeseoLlamadoKeyword_0_2_or_EscriboEnEstasLNeasUnaIntenciNLlamadaKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ' o quizás ' | ' o quizás'
	 *
	 * This ambiguous syntax occurs at:
	 *     {OrExpression.left=} (ambiguity) right=AndExpression
	 
	 * </pre>
	 */
	protected void emit_OrExpression_OQuizSKeyword_1_1_0_or_OQuizSKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'invoco a' nameFuncion=[MI_ID|ID]
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) op='no creo que'
	 *     (rule start) (ambiguity) valueBoolean='jamás'
	 *     (rule start) (ambiguity) valueBoolean='siempre'
	 *     (rule start) (ambiguity) valueInt=INT
	 *     (rule start) (ambiguity) valueString=STRING
	 *     (rule start) (ambiguity) {AdditiveExpression.left=}
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {EqualityExpression.left=}
	 *     (rule start) (ambiguity) {MultiplicativeExpression.left=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {RelationalExpression.left=}
	 
	 * </pre>
	 */
	protected void emit_PrimaryExpression_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) op='no creo que'
	 *     (rule start) (ambiguity) {AdditiveExpression.left=}
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {EqualityExpression.left=}
	 *     (rule start) (ambiguity) {MultiplicativeExpression.left=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {RelationalExpression.left=}
	 
	 * </pre>
	 */
	protected void emit_PrimaryExpression_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Querido' | 'Querida'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 
	 * </pre>
	 */
	protected void emit_Saludo_QueridaKeyword_0_1_or_QueridoKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
