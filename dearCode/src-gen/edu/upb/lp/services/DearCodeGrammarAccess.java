/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DearCodeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Program");
		private final Assignment cCartasAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCartasCartaParserRuleCall_0 = (RuleCall)cCartasAssignment.eContents().get(0);
		
		//Program:
		//    cartas+=Carta+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cartas+=Carta+
		public Assignment getCartasAssignment() { return cCartasAssignment; }
		
		//Carta
		public RuleCall getCartasCartaParserRuleCall_0() { return cCartasCartaParserRuleCall_0; }
	}
	public class CartaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Carta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSaludoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSaludoSaludoParserRuleCall_0_0 = (RuleCall)cSaludoAssignment_0.eContents().get(0);
		private final Assignment cCuerpoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCuerpoCuerpoParserRuleCall_1_0 = (RuleCall)cCuerpoAssignment_1.eContents().get(0);
		private final Assignment cDespedidaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDespedidaDespedidaParserRuleCall_2_0 = (RuleCall)cDespedidaAssignment_2.eContents().get(0);
		
		//Carta:
		//    saludo=Saludo
		//    cuerpo=Cuerpo
		//    despedida=Despedida
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//saludo=Saludo
		//cuerpo=Cuerpo
		//despedida=Despedida
		public Group getGroup() { return cGroup; }
		
		//saludo=Saludo
		public Assignment getSaludoAssignment_0() { return cSaludoAssignment_0; }
		
		//Saludo
		public RuleCall getSaludoSaludoParserRuleCall_0_0() { return cSaludoSaludoParserRuleCall_0_0; }
		
		//cuerpo=Cuerpo
		public Assignment getCuerpoAssignment_1() { return cCuerpoAssignment_1; }
		
		//Cuerpo
		public RuleCall getCuerpoCuerpoParserRuleCall_1_0() { return cCuerpoCuerpoParserRuleCall_1_0; }
		
		//despedida=Despedida
		public Assignment getDespedidaAssignment_2() { return cDespedidaAssignment_2; }
		
		//Despedida
		public RuleCall getDespedidaDespedidaParserRuleCall_2_0() { return cDespedidaDespedidaParserRuleCall_2_0; }
	}
	public class SaludoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Saludo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cQueridoKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cQueridaKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameANYTEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Saludo:
		//    ('Querido'|'Querida') name=ANYTEXT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('Querido'|'Querida') name=ANYTEXT
		public Group getGroup() { return cGroup; }
		
		//('Querido'|'Querida')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Querido'
		public Keyword getQueridoKeyword_0_0() { return cQueridoKeyword_0_0; }
		
		//'Querida'
		public Keyword getQueridaKeyword_0_1() { return cQueridaKeyword_0_1; }
		
		//name=ANYTEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ANYTEXT
		public RuleCall getNameANYTEXTTerminalRuleCall_1_0() { return cNameANYTEXTTerminalRuleCall_1_0; }
	}
	public class DespedidaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Despedida");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConCariOTuProgramadorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameANYTEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Despedida:
		//    'Con cariño, Tu programador' name=ANYTEXT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Con cariño, Tu programador' name=ANYTEXT
		public Group getGroup() { return cGroup; }
		
		//'Con cariño, Tu programador'
		public Keyword getConCariOTuProgramadorKeyword_0() { return cConCariOTuProgramadorKeyword_0; }
		
		//name=ANYTEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ANYTEXT
		public RuleCall getNameANYTEXTTerminalRuleCall_1_0() { return cNameANYTEXTTerminalRuleCall_1_0; }
	}
	public class CuerpoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Cuerpo");
		private final Assignment cInstruccionesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstruccionesInstruccionParserRuleCall_0 = (RuleCall)cInstruccionesAssignment.eContents().get(0);
		
		//Cuerpo:
		//    instrucciones+=Instruccion+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//instrucciones+=Instruccion+
		public Assignment getInstruccionesAssignment() { return cInstruccionesAssignment; }
		
		//Instruccion
		public RuleCall getInstruccionesInstruccionParserRuleCall_0() { return cInstruccionesInstruccionParserRuleCall_0; }
	}
	public class InstruccionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Instruccion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclararParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReasignarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Instruccion:
		//    Declarar | Reasignar
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Declarar | Reasignar
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declarar
		public RuleCall getDeclararParserRuleCall_0() { return cDeclararParserRuleCall_0; }
		
		//Reasignar
		public RuleCall getReasignarParserRuleCall_1() { return cReasignarParserRuleCall_1; }
	}
	public class DeclararElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Declarar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVerboDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVerboDeclVerboDeclaracionParserRuleCall_0_0 = (RuleCall)cVerboDeclAssignment_0.eContents().get(0);
		private final Assignment cArticuloAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArticuloArticuloParserRuleCall_1_0 = (RuleCall)cArticuloAssignment_1.eContents().get(0);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorValorParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		private final Assignment cSustantivoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSustantivoMI_IDParserRuleCall_3_0 = (RuleCall)cSustantivoAssignment_3.eContents().get(0);
		private final Assignment cComentarioAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cComentarioAlternatives_4_0 = (Alternatives)cComentarioAssignment_4.eContents().get(0);
		private final RuleCall cComentarioANYTEXTTerminalRuleCall_4_0_0 = (RuleCall)cComentarioAlternatives_4_0.eContents().get(0);
		private final RuleCall cComentarioSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cComentarioAlternatives_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Declarar:
		//    verboDecl=VerboDeclaracion
		//    articulo=Articulo
		//    valor=Valor
		//    sustantivo=MI_ID
		//    comentario=(ANYTEXT | STRING)?
		//    '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//verboDecl=VerboDeclaracion
		//articulo=Articulo
		//valor=Valor
		//sustantivo=MI_ID
		//comentario=(ANYTEXT | STRING)?
		//'.'
		public Group getGroup() { return cGroup; }
		
		//verboDecl=VerboDeclaracion
		public Assignment getVerboDeclAssignment_0() { return cVerboDeclAssignment_0; }
		
		//VerboDeclaracion
		public RuleCall getVerboDeclVerboDeclaracionParserRuleCall_0_0() { return cVerboDeclVerboDeclaracionParserRuleCall_0_0; }
		
		//articulo=Articulo
		public Assignment getArticuloAssignment_1() { return cArticuloAssignment_1; }
		
		//Articulo
		public RuleCall getArticuloArticuloParserRuleCall_1_0() { return cArticuloArticuloParserRuleCall_1_0; }
		
		//valor=Valor
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }
		
		//Valor
		public RuleCall getValorValorParserRuleCall_2_0() { return cValorValorParserRuleCall_2_0; }
		
		//sustantivo=MI_ID
		public Assignment getSustantivoAssignment_3() { return cSustantivoAssignment_3; }
		
		//MI_ID
		public RuleCall getSustantivoMI_IDParserRuleCall_3_0() { return cSustantivoMI_IDParserRuleCall_3_0; }
		
		//comentario=(ANYTEXT | STRING)?
		public Assignment getComentarioAssignment_4() { return cComentarioAssignment_4; }
		
		//(ANYTEXT | STRING)
		public Alternatives getComentarioAlternatives_4_0() { return cComentarioAlternatives_4_0; }
		
		//ANYTEXT
		public RuleCall getComentarioANYTEXTTerminalRuleCall_4_0_0() { return cComentarioANYTEXTTerminalRuleCall_4_0_0; }
		
		//STRING
		public RuleCall getComentarioSTRINGTerminalRuleCall_4_0_1() { return cComentarioSTRINGTerminalRuleCall_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
	}
	public class ReasignarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Reasignar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVerboReasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVerboReasVerboReasignacionParserRuleCall_0_0 = (RuleCall)cVerboReasAssignment_0.eContents().get(0);
		private final Assignment cSustantivoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSustantivoMI_IDParserRuleCall_1_0 = (RuleCall)cSustantivoAssignment_1.eContents().get(0);
		private final Keyword cConKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValorValorParserRuleCall_3_0 = (RuleCall)cValorAssignment_3.eContents().get(0);
		private final Assignment cComentarioAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cComentarioAlternatives_4_0 = (Alternatives)cComentarioAssignment_4.eContents().get(0);
		private final RuleCall cComentarioANYTEXTTerminalRuleCall_4_0_0 = (RuleCall)cComentarioAlternatives_4_0.eContents().get(0);
		private final RuleCall cComentarioSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cComentarioAlternatives_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Reasignar:
		//    verboReas=VerboReasignacion
		//    sustantivo=MI_ID
		//    'con'
		//    valor=Valor
		//    comentario=(ANYTEXT| STRING)?
		//    '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//verboReas=VerboReasignacion
		//sustantivo=MI_ID
		//'con'
		//valor=Valor
		//comentario=(ANYTEXT| STRING)?
		//'.'
		public Group getGroup() { return cGroup; }
		
		//verboReas=VerboReasignacion
		public Assignment getVerboReasAssignment_0() { return cVerboReasAssignment_0; }
		
		//VerboReasignacion
		public RuleCall getVerboReasVerboReasignacionParserRuleCall_0_0() { return cVerboReasVerboReasignacionParserRuleCall_0_0; }
		
		//sustantivo=MI_ID
		public Assignment getSustantivoAssignment_1() { return cSustantivoAssignment_1; }
		
		//MI_ID
		public RuleCall getSustantivoMI_IDParserRuleCall_1_0() { return cSustantivoMI_IDParserRuleCall_1_0; }
		
		//'con'
		public Keyword getConKeyword_2() { return cConKeyword_2; }
		
		//valor=Valor
		public Assignment getValorAssignment_3() { return cValorAssignment_3; }
		
		//Valor
		public RuleCall getValorValorParserRuleCall_3_0() { return cValorValorParserRuleCall_3_0; }
		
		//comentario=(ANYTEXT| STRING)?
		public Assignment getComentarioAssignment_4() { return cComentarioAssignment_4; }
		
		//(ANYTEXT| STRING)
		public Alternatives getComentarioAlternatives_4_0() { return cComentarioAlternatives_4_0; }
		
		//ANYTEXT
		public RuleCall getComentarioANYTEXTTerminalRuleCall_4_0_0() { return cComentarioANYTEXTTerminalRuleCall_4_0_0; }
		
		//STRING
		public RuleCall getComentarioSTRINGTerminalRuleCall_4_0_1() { return cComentarioSTRINGTerminalRuleCall_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
	}
	public class ValorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Valor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMI_IDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumeroLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Valor:
		//    MI_ID | NumeroLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MI_ID | NumeroLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MI_ID
		public RuleCall getMI_IDParserRuleCall_0() { return cMI_IDParserRuleCall_0; }
		
		//NumeroLiteral
		public RuleCall getNumeroLiteralParserRuleCall_1() { return cNumeroLiteralParserRuleCall_1; }
	}
	public class NumeroLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.NumeroLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompuestoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumeroLiteral:
		//    Simple | Compuesto
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Simple | Compuesto
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Simple
		public RuleCall getSimpleParserRuleCall_0() { return cSimpleParserRuleCall_0; }
		
		//Compuesto
		public RuleCall getCompuestoParserRuleCall_1() { return cCompuestoParserRuleCall_1; }
	}
	public class SimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Simple");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueCeroKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueUnoKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueDosKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueTresKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueCuatroKeyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValueCincoKeyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		private final Keyword cValueSeisKeyword_0_6 = (Keyword)cValueAlternatives_0.eContents().get(6);
		private final Keyword cValueSieteKeyword_0_7 = (Keyword)cValueAlternatives_0.eContents().get(7);
		private final Keyword cValueOchoKeyword_0_8 = (Keyword)cValueAlternatives_0.eContents().get(8);
		private final Keyword cValueNueveKeyword_0_9 = (Keyword)cValueAlternatives_0.eContents().get(9);
		
		//Simple:
		//    value=('cero' | 'uno' | 'dos' | 'tres' | 'cuatro' | 'cinco' | 'seis' | 'siete' | 'ocho' | 'nueve')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=('cero' | 'uno' | 'dos' | 'tres' | 'cuatro' | 'cinco' | 'seis' | 'siete' | 'ocho' | 'nueve')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('cero' | 'uno' | 'dos' | 'tres' | 'cuatro' | 'cinco' | 'seis' | 'siete' | 'ocho' | 'nueve')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'cero'
		public Keyword getValueCeroKeyword_0_0() { return cValueCeroKeyword_0_0; }
		
		//'uno'
		public Keyword getValueUnoKeyword_0_1() { return cValueUnoKeyword_0_1; }
		
		//'dos'
		public Keyword getValueDosKeyword_0_2() { return cValueDosKeyword_0_2; }
		
		//'tres'
		public Keyword getValueTresKeyword_0_3() { return cValueTresKeyword_0_3; }
		
		//'cuatro'
		public Keyword getValueCuatroKeyword_0_4() { return cValueCuatroKeyword_0_4; }
		
		//'cinco'
		public Keyword getValueCincoKeyword_0_5() { return cValueCincoKeyword_0_5; }
		
		//'seis'
		public Keyword getValueSeisKeyword_0_6() { return cValueSeisKeyword_0_6; }
		
		//'siete'
		public Keyword getValueSieteKeyword_0_7() { return cValueSieteKeyword_0_7; }
		
		//'ocho'
		public Keyword getValueOchoKeyword_0_8() { return cValueOchoKeyword_0_8; }
		
		//'nueve'
		public Keyword getValueNueveKeyword_0_9() { return cValueNueveKeyword_0_9; }
	}
	public class CompuestoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Compuesto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCantidadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCantidadSimpleParserRuleCall_0_0 = (RuleCall)cCantidadAssignment_0.eContents().get(0);
		private final Assignment cMultiplicadorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMultiplicadorMultiplicadorParserRuleCall_1_0 = (RuleCall)cMultiplicadorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cYKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRestoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRestoSimpleParserRuleCall_2_1_0 = (RuleCall)cRestoAssignment_2_1.eContents().get(0);
		
		//Compuesto:
		//    cantidad=Simple multiplicador=Multiplicador ('y' resto=Simple)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cantidad=Simple multiplicador=Multiplicador ('y' resto=Simple)?
		public Group getGroup() { return cGroup; }
		
		//cantidad=Simple
		public Assignment getCantidadAssignment_0() { return cCantidadAssignment_0; }
		
		//Simple
		public RuleCall getCantidadSimpleParserRuleCall_0_0() { return cCantidadSimpleParserRuleCall_0_0; }
		
		//multiplicador=Multiplicador
		public Assignment getMultiplicadorAssignment_1() { return cMultiplicadorAssignment_1; }
		
		//Multiplicador
		public RuleCall getMultiplicadorMultiplicadorParserRuleCall_1_0() { return cMultiplicadorMultiplicadorParserRuleCall_1_0; }
		
		//('y' resto=Simple)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'y'
		public Keyword getYKeyword_2_0() { return cYKeyword_2_0; }
		
		//resto=Simple
		public Assignment getRestoAssignment_2_1() { return cRestoAssignment_2_1; }
		
		//Simple
		public RuleCall getRestoSimpleParserRuleCall_2_1_0() { return cRestoSimpleParserRuleCall_2_1_0; }
	}
	public class MultiplicadorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Multiplicador");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDecenaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cSKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCentenaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cSKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cMillarKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEsKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Multiplicador:
		//    'decena' ('s')? | 'centena' ('s')? | 'millar' ('es')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'decena' ('s')? | 'centena' ('s')? | 'millar' ('es')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'decena' ('s')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'decena'
		public Keyword getDecenaKeyword_0_0() { return cDecenaKeyword_0_0; }
		
		//('s')?
		public Keyword getSKeyword_0_1() { return cSKeyword_0_1; }
		
		//'centena' ('s')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'centena'
		public Keyword getCentenaKeyword_1_0() { return cCentenaKeyword_1_0; }
		
		//('s')?
		public Keyword getSKeyword_1_1() { return cSKeyword_1_1; }
		
		//'millar' ('es')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'millar'
		public Keyword getMillarKeyword_2_0() { return cMillarKeyword_2_0; }
		
		//('es')?
		public Keyword getEsKeyword_2_1() { return cEsKeyword_2_1; }
	}
	public class ArticuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Articulo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUnKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Articulo:
		//    'un' | 'una'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'un' | 'una'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'un'
		public Keyword getUnKeyword_0() { return cUnKeyword_0; }
		
		//'una'
		public Keyword getUnaKeyword_1() { return cUnaKeyword_1; }
	}
	public class VerboDeclaracionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.VerboDeclaracion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTeRegaloKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOfrezcoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cObsequioKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDepositoEnTuJardNKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//VerboDeclaracion:
		//    'Te regalo' | 'Ofrezco' | 'Obsequio' | 'Deposito en tu jardín'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Te regalo' | 'Ofrezco' | 'Obsequio' | 'Deposito en tu jardín'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Te regalo'
		public Keyword getTeRegaloKeyword_0() { return cTeRegaloKeyword_0; }
		
		//'Ofrezco'
		public Keyword getOfrezcoKeyword_1() { return cOfrezcoKeyword_1; }
		
		//'Obsequio'
		public Keyword getObsequioKeyword_2() { return cObsequioKeyword_2; }
		
		//'Deposito en tu jardín'
		public Keyword getDepositoEnTuJardNKeyword_3() { return cDepositoEnTuJardNKeyword_3; }
	}
	public class VerboReasignacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.VerboReasignacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPermTemeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cAlimentarKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPermTemeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRegarKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPermTemeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cAjustarKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//VerboReasignacion:
		//    'Permíteme' 'alimentar' | 'Permíteme' 'regar' | 'Permíteme' 'ajustar'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Permíteme' 'alimentar' | 'Permíteme' 'regar' | 'Permíteme' 'ajustar'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Permíteme' 'alimentar'
		public Group getGroup_0() { return cGroup_0; }
		
		//'Permíteme'
		public Keyword getPermTemeKeyword_0_0() { return cPermTemeKeyword_0_0; }
		
		//'alimentar'
		public Keyword getAlimentarKeyword_0_1() { return cAlimentarKeyword_0_1; }
		
		//'Permíteme' 'regar'
		public Group getGroup_1() { return cGroup_1; }
		
		//'Permíteme'
		public Keyword getPermTemeKeyword_1_0() { return cPermTemeKeyword_1_0; }
		
		//'regar'
		public Keyword getRegarKeyword_1_1() { return cRegarKeyword_1_1; }
		
		//'Permíteme' 'ajustar'
		public Group getGroup_2() { return cGroup_2; }
		
		//'Permíteme'
		public Keyword getPermTemeKeyword_2_0() { return cPermTemeKeyword_2_0; }
		
		//'ajustar'
		public Keyword getAjustarKeyword_2_1() { return cAjustarKeyword_2_1; }
	}
	public class MI_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.MI_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//MI_ID:
		//     '@' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=ID
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final CartaElements pCarta;
	private final SaludoElements pSaludo;
	private final DespedidaElements pDespedida;
	private final CuerpoElements pCuerpo;
	private final InstruccionElements pInstruccion;
	private final DeclararElements pDeclarar;
	private final ReasignarElements pReasignar;
	private final ValorElements pValor;
	private final NumeroLiteralElements pNumeroLiteral;
	private final SimpleElements pSimple;
	private final CompuestoElements pCompuesto;
	private final MultiplicadorElements pMultiplicador;
	private final ArticuloElements pArticulo;
	private final VerboDeclaracionElements pVerboDeclaracion;
	private final VerboReasignacionElements pVerboReasignacion;
	private final MI_IDElements pMI_ID;
	private final TerminalRule tANYTEXT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DearCodeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pCarta = new CartaElements();
		this.pSaludo = new SaludoElements();
		this.pDespedida = new DespedidaElements();
		this.pCuerpo = new CuerpoElements();
		this.pInstruccion = new InstruccionElements();
		this.pDeclarar = new DeclararElements();
		this.pReasignar = new ReasignarElements();
		this.pValor = new ValorElements();
		this.pNumeroLiteral = new NumeroLiteralElements();
		this.pSimple = new SimpleElements();
		this.pCompuesto = new CompuestoElements();
		this.pMultiplicador = new MultiplicadorElements();
		this.pArticulo = new ArticuloElements();
		this.pVerboDeclaracion = new VerboDeclaracionElements();
		this.pVerboReasignacion = new VerboReasignacionElements();
		this.pMI_ID = new MI_IDElements();
		this.tANYTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.ANYTEXT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.DearCode".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//    cartas+=Carta+
	//;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Carta:
	//    saludo=Saludo
	//    cuerpo=Cuerpo
	//    despedida=Despedida
	//;
	public CartaElements getCartaAccess() {
		return pCarta;
	}
	
	public ParserRule getCartaRule() {
		return getCartaAccess().getRule();
	}
	
	//Saludo:
	//    ('Querido'|'Querida') name=ANYTEXT
	//;
	public SaludoElements getSaludoAccess() {
		return pSaludo;
	}
	
	public ParserRule getSaludoRule() {
		return getSaludoAccess().getRule();
	}
	
	//Despedida:
	//    'Con cariño, Tu programador' name=ANYTEXT
	//;
	public DespedidaElements getDespedidaAccess() {
		return pDespedida;
	}
	
	public ParserRule getDespedidaRule() {
		return getDespedidaAccess().getRule();
	}
	
	//Cuerpo:
	//    instrucciones+=Instruccion+
	//;
	public CuerpoElements getCuerpoAccess() {
		return pCuerpo;
	}
	
	public ParserRule getCuerpoRule() {
		return getCuerpoAccess().getRule();
	}
	
	//Instruccion:
	//    Declarar | Reasignar
	//;
	public InstruccionElements getInstruccionAccess() {
		return pInstruccion;
	}
	
	public ParserRule getInstruccionRule() {
		return getInstruccionAccess().getRule();
	}
	
	//Declarar:
	//    verboDecl=VerboDeclaracion
	//    articulo=Articulo
	//    valor=Valor
	//    sustantivo=MI_ID
	//    comentario=(ANYTEXT | STRING)?
	//    '.'
	//;
	public DeclararElements getDeclararAccess() {
		return pDeclarar;
	}
	
	public ParserRule getDeclararRule() {
		return getDeclararAccess().getRule();
	}
	
	//Reasignar:
	//    verboReas=VerboReasignacion
	//    sustantivo=MI_ID
	//    'con'
	//    valor=Valor
	//    comentario=(ANYTEXT| STRING)?
	//    '.'
	//;
	public ReasignarElements getReasignarAccess() {
		return pReasignar;
	}
	
	public ParserRule getReasignarRule() {
		return getReasignarAccess().getRule();
	}
	
	//Valor:
	//    MI_ID | NumeroLiteral
	//;
	public ValorElements getValorAccess() {
		return pValor;
	}
	
	public ParserRule getValorRule() {
		return getValorAccess().getRule();
	}
	
	//NumeroLiteral:
	//    Simple | Compuesto
	//;
	public NumeroLiteralElements getNumeroLiteralAccess() {
		return pNumeroLiteral;
	}
	
	public ParserRule getNumeroLiteralRule() {
		return getNumeroLiteralAccess().getRule();
	}
	
	//Simple:
	//    value=('cero' | 'uno' | 'dos' | 'tres' | 'cuatro' | 'cinco' | 'seis' | 'siete' | 'ocho' | 'nueve')
	//;
	public SimpleElements getSimpleAccess() {
		return pSimple;
	}
	
	public ParserRule getSimpleRule() {
		return getSimpleAccess().getRule();
	}
	
	//Compuesto:
	//    cantidad=Simple multiplicador=Multiplicador ('y' resto=Simple)?
	//;
	public CompuestoElements getCompuestoAccess() {
		return pCompuesto;
	}
	
	public ParserRule getCompuestoRule() {
		return getCompuestoAccess().getRule();
	}
	
	//Multiplicador:
	//    'decena' ('s')? | 'centena' ('s')? | 'millar' ('es')?
	//;
	public MultiplicadorElements getMultiplicadorAccess() {
		return pMultiplicador;
	}
	
	public ParserRule getMultiplicadorRule() {
		return getMultiplicadorAccess().getRule();
	}
	
	//Articulo:
	//    'un' | 'una'
	//;
	public ArticuloElements getArticuloAccess() {
		return pArticulo;
	}
	
	public ParserRule getArticuloRule() {
		return getArticuloAccess().getRule();
	}
	
	//VerboDeclaracion:
	//    'Te regalo' | 'Ofrezco' | 'Obsequio' | 'Deposito en tu jardín'
	//;
	public VerboDeclaracionElements getVerboDeclaracionAccess() {
		return pVerboDeclaracion;
	}
	
	public ParserRule getVerboDeclaracionRule() {
		return getVerboDeclaracionAccess().getRule();
	}
	
	//VerboReasignacion:
	//    'Permíteme' 'alimentar' | 'Permíteme' 'regar' | 'Permíteme' 'ajustar'
	//;
	public VerboReasignacionElements getVerboReasignacionAccess() {
		return pVerboReasignacion;
	}
	
	public ParserRule getVerboReasignacionRule() {
		return getVerboReasignacionAccess().getRule();
	}
	
	//MI_ID:
	//     '@' name=ID
	//;
	public MI_IDElements getMI_IDAccess() {
		return pMI_ID;
	}
	
	public ParserRule getMI_IDRule() {
		return getMI_IDAccess().getRule();
	}
	
	//terminal ANYTEXT:
	//    '_'
	//    ( 'a'..'z' | 'A'..'Z' | '0'..'9'
	//    | '-' | '.' | '(' | ')'
	//    | '¿' | '?' | '¡' | '!'
	//    | '\'' | '’'
	//    | ' '
	//    )+
	//    ('...' | '.' | ':')
	//;
	public TerminalRule getANYTEXTRule() {
		return tANYTEXT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
