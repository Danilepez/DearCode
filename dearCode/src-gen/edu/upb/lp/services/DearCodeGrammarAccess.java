/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DearCodeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Program");
		private final Assignment cCartaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCartaCartaParserRuleCall_0 = (RuleCall)cCartaAssignment.eContents().get(0);
		
		//Program:
		//    carta=Carta
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//carta=Carta
		public Assignment getCartaAssignment() { return cCartaAssignment; }
		
		//Carta
		public RuleCall getCartaCartaParserRuleCall_0() { return cCartaCartaParserRuleCall_0; }
	}
	public class CartaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Carta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSaludoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSaludoSaludoParserRuleCall_0_0 = (RuleCall)cSaludoAssignment_0.eContents().get(0);
		private final Assignment cCuerpoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCuerpoCuerpoParserRuleCall_1_0 = (RuleCall)cCuerpoAssignment_1.eContents().get(0);
		private final Assignment cDespedidaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDespedidaDespedidaParserRuleCall_2_0 = (RuleCall)cDespedidaAssignment_2.eContents().get(0);
		
		//Carta:
		//    saludo=Saludo
		//    cuerpo=Cuerpo
		//    despedida=Despedida
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//saludo=Saludo
		//cuerpo=Cuerpo
		//despedida=Despedida
		public Group getGroup() { return cGroup; }
		
		//saludo=Saludo
		public Assignment getSaludoAssignment_0() { return cSaludoAssignment_0; }
		
		//Saludo
		public RuleCall getSaludoSaludoParserRuleCall_0_0() { return cSaludoSaludoParserRuleCall_0_0; }
		
		//cuerpo=Cuerpo
		public Assignment getCuerpoAssignment_1() { return cCuerpoAssignment_1; }
		
		//Cuerpo
		public RuleCall getCuerpoCuerpoParserRuleCall_1_0() { return cCuerpoCuerpoParserRuleCall_1_0; }
		
		//despedida=Despedida
		public Assignment getDespedidaAssignment_2() { return cDespedidaAssignment_2; }
		
		//Despedida
		public RuleCall getDespedidaDespedidaParserRuleCall_2_0() { return cDespedidaDespedidaParserRuleCall_2_0; }
	}
	public class SaludoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Saludo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cQueridoKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cQueridaKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Saludo: ('Querido'|'Querida') name=ID '.';
		@Override public ParserRule getRule() { return rule; }
		
		//('Querido'|'Querida') name=ID '.'
		public Group getGroup() { return cGroup; }
		
		//('Querido'|'Querida')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Querido'
		public Keyword getQueridoKeyword_0_0() { return cQueridoKeyword_0_0; }
		
		//'Querida'
		public Keyword getQueridaKeyword_0_1() { return cQueridaKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class DespedidaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Despedida");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConCariOTuProgramadorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Despedida: 'Con cariño, Tu programador' name=ID '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'Con cariño, Tu programador' name=ID '.'
		public Group getGroup() { return cGroup; }
		
		//'Con cariño, Tu programador'
		public Keyword getConCariOTuProgramadorKeyword_0() { return cConCariOTuProgramadorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class CuerpoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Cuerpo");
		private final Assignment cInstruccionesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstruccionesInstruccionParserRuleCall_0 = (RuleCall)cInstruccionesAssignment.eContents().get(0);
		
		//Cuerpo: instrucciones+=Instruccion+;
		@Override public ParserRule getRule() { return rule; }
		
		//instrucciones+=Instruccion+
		public Assignment getInstruccionesAssignment() { return cInstruccionesAssignment; }
		
		//Instruccion
		public RuleCall getInstruccionesInstruccionParserRuleCall_0() { return cInstruccionesInstruccionParserRuleCall_0; }
	}
	public class InstruccionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Instruccion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclararParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReasignarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCondicionalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBucleWhileParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBucleForParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEntradaParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSalidaParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFuncionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFunctionCallParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Instruccion:
		//    Declarar | Reasignar | Condicional
		//    | BucleWhile | BucleFor | Entrada | Salida | Funcion | FunctionCall
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Declarar | Reasignar | Condicional
		//| BucleWhile | BucleFor | Entrada | Salida | Funcion | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declarar
		public RuleCall getDeclararParserRuleCall_0() { return cDeclararParserRuleCall_0; }
		
		//Reasignar
		public RuleCall getReasignarParserRuleCall_1() { return cReasignarParserRuleCall_1; }
		
		//Condicional
		public RuleCall getCondicionalParserRuleCall_2() { return cCondicionalParserRuleCall_2; }
		
		//BucleWhile
		public RuleCall getBucleWhileParserRuleCall_3() { return cBucleWhileParserRuleCall_3; }
		
		//BucleFor
		public RuleCall getBucleForParserRuleCall_4() { return cBucleForParserRuleCall_4; }
		
		//Entrada
		public RuleCall getEntradaParserRuleCall_5() { return cEntradaParserRuleCall_5; }
		
		//Salida
		public RuleCall getSalidaParserRuleCall_6() { return cSalidaParserRuleCall_6; }
		
		//Funcion
		public RuleCall getFuncionParserRuleCall_7() { return cFuncionParserRuleCall_7; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_8() { return cFunctionCallParserRuleCall_8; }
	}
	public class DeclararElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Declarar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVerboDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVerboDeclVerboDeclaracionParserRuleCall_0_0 = (RuleCall)cVerboDeclAssignment_0.eContents().get(0);
		private final Assignment cArticuloAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArticuloArticuloParserRuleCall_1_0 = (RuleCall)cArticuloAssignment_1.eContents().get(0);
		private final Assignment cSustantivoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSustantivoMI_IDParserRuleCall_2_0 = (RuleCall)cSustantivoAssignment_2.eContents().get(0);
		private final Assignment cPreComentarioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPreComentarioCommentParserRuleCall_3_0 = (RuleCall)cPreComentarioAssignment_3.eContents().get(0);
		private final Assignment cValorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValorExpressionParserRuleCall_4_0 = (RuleCall)cValorAssignment_4.eContents().get(0);
		private final Assignment cPostComentarioAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPostComentarioCommentParserRuleCall_5_0 = (RuleCall)cPostComentarioAssignment_5.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Declarar:
		//    verboDecl=VerboDeclaracion
		//    articulo=Articulo
		//    sustantivo=MI_ID
		//    preComentario=Comment?
		//    valor=Expression
		//    postComentario=Comment?
		//    '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//verboDecl=VerboDeclaracion
		//articulo=Articulo
		//sustantivo=MI_ID
		//preComentario=Comment?
		//valor=Expression
		//postComentario=Comment?
		//'.'
		public Group getGroup() { return cGroup; }
		
		//verboDecl=VerboDeclaracion
		public Assignment getVerboDeclAssignment_0() { return cVerboDeclAssignment_0; }
		
		//VerboDeclaracion
		public RuleCall getVerboDeclVerboDeclaracionParserRuleCall_0_0() { return cVerboDeclVerboDeclaracionParserRuleCall_0_0; }
		
		//articulo=Articulo
		public Assignment getArticuloAssignment_1() { return cArticuloAssignment_1; }
		
		//Articulo
		public RuleCall getArticuloArticuloParserRuleCall_1_0() { return cArticuloArticuloParserRuleCall_1_0; }
		
		//sustantivo=MI_ID
		public Assignment getSustantivoAssignment_2() { return cSustantivoAssignment_2; }
		
		//MI_ID
		public RuleCall getSustantivoMI_IDParserRuleCall_2_0() { return cSustantivoMI_IDParserRuleCall_2_0; }
		
		//preComentario=Comment?
		public Assignment getPreComentarioAssignment_3() { return cPreComentarioAssignment_3; }
		
		//Comment
		public RuleCall getPreComentarioCommentParserRuleCall_3_0() { return cPreComentarioCommentParserRuleCall_3_0; }
		
		//valor=Expression
		public Assignment getValorAssignment_4() { return cValorAssignment_4; }
		
		//Expression
		public RuleCall getValorExpressionParserRuleCall_4_0() { return cValorExpressionParserRuleCall_4_0; }
		
		//postComentario=Comment?
		public Assignment getPostComentarioAssignment_5() { return cPostComentarioAssignment_5; }
		
		//Comment
		public RuleCall getPostComentarioCommentParserRuleCall_5_0() { return cPostComentarioCommentParserRuleCall_5_0; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
	}
	public class ReasignarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Reasignar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVerboReasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVerboReasVerboReasignacionParserRuleCall_0_0 = (RuleCall)cVerboReasAssignment_0.eContents().get(0);
		private final Assignment cPreComentarioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPreComentarioCommentParserRuleCall_1_0 = (RuleCall)cPreComentarioAssignment_1.eContents().get(0);
		private final Assignment cSustantivoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSustantivoMI_IDParserRuleCall_2_0 = (RuleCall)cSustantivoAssignment_2.eContents().get(0);
		private final Assignment cPostComentarioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPostComentarioCommentParserRuleCall_3_0 = (RuleCall)cPostComentarioAssignment_3.eContents().get(0);
		private final Assignment cValorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValorExpressionParserRuleCall_4_0 = (RuleCall)cValorAssignment_4.eContents().get(0);
		private final Assignment cComentarioAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComentarioCommentParserRuleCall_5_0 = (RuleCall)cComentarioAssignment_5.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Reasignar:
		//    verboReas=VerboReasignacion
		//    preComentario=Comment?
		//    sustantivo=MI_ID
		//    postComentario=Comment?
		//    valor=Expression
		//    comentario=Comment?
		//    '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//verboReas=VerboReasignacion
		//preComentario=Comment?
		//sustantivo=MI_ID
		//postComentario=Comment?
		//valor=Expression
		//comentario=Comment?
		//'.'
		public Group getGroup() { return cGroup; }
		
		//verboReas=VerboReasignacion
		public Assignment getVerboReasAssignment_0() { return cVerboReasAssignment_0; }
		
		//VerboReasignacion
		public RuleCall getVerboReasVerboReasignacionParserRuleCall_0_0() { return cVerboReasVerboReasignacionParserRuleCall_0_0; }
		
		//preComentario=Comment?
		public Assignment getPreComentarioAssignment_1() { return cPreComentarioAssignment_1; }
		
		//Comment
		public RuleCall getPreComentarioCommentParserRuleCall_1_0() { return cPreComentarioCommentParserRuleCall_1_0; }
		
		//sustantivo=MI_ID
		public Assignment getSustantivoAssignment_2() { return cSustantivoAssignment_2; }
		
		//MI_ID
		public RuleCall getSustantivoMI_IDParserRuleCall_2_0() { return cSustantivoMI_IDParserRuleCall_2_0; }
		
		//postComentario=Comment?
		public Assignment getPostComentarioAssignment_3() { return cPostComentarioAssignment_3; }
		
		//Comment
		public RuleCall getPostComentarioCommentParserRuleCall_3_0() { return cPostComentarioCommentParserRuleCall_3_0; }
		
		//valor=Expression
		public Assignment getValorAssignment_4() { return cValorAssignment_4; }
		
		//Expression
		public RuleCall getValorExpressionParserRuleCall_4_0() { return cValorExpressionParserRuleCall_4_0; }
		
		//comentario=Comment?
		public Assignment getComentarioAssignment_5() { return cComentarioAssignment_5; }
		
		//Comment
		public RuleCall getComentarioCommentParserRuleCall_5_0() { return cComentarioCommentParserRuleCall_5_0; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
	}
	public class EntradaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Entrada");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLePedAlLectorQueMeDijeraKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableMI_IDParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cEnUnSusurroNumRicoKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cConPalabrasDeTerciopeloKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Entrada:
		//    'Le pedí al lector que me dijera' variable=MI_ID
		//    ("en un susurro numérico" | "con palabras de terciopelo")?
		//    '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Le pedí al lector que me dijera' variable=MI_ID
		//("en un susurro numérico" | "con palabras de terciopelo")?
		//'.'
		public Group getGroup() { return cGroup; }
		
		//'Le pedí al lector que me dijera'
		public Keyword getLePedAlLectorQueMeDijeraKeyword_0() { return cLePedAlLectorQueMeDijeraKeyword_0; }
		
		//variable=MI_ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//MI_ID
		public RuleCall getVariableMI_IDParserRuleCall_1_0() { return cVariableMI_IDParserRuleCall_1_0; }
		
		//("en un susurro numérico" | "con palabras de terciopelo")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"en un susurro numérico"
		public Keyword getEnUnSusurroNumRicoKeyword_2_0() { return cEnUnSusurroNumRicoKeyword_2_0; }
		
		//"con palabras de terciopelo"
		public Keyword getConPalabrasDeTerciopeloKeyword_2_1() { return cConPalabrasDeTerciopeloKeyword_2_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class SalidaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Salida");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHoyLeQuiseContarAlMundoSobreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpresionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpresionExpressionParserRuleCall_1_0 = (RuleCall)cExpresionAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Salida:
		//    'Hoy le quise contar al mundo sobre:' expresion=Expression '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Hoy le quise contar al mundo sobre:' expresion=Expression '.'
		public Group getGroup() { return cGroup; }
		
		//'Hoy le quise contar al mundo sobre:'
		public Keyword getHoyLeQuiseContarAlMundoSobreKeyword_0() { return cHoyLeQuiseContarAlMundoSobreKeyword_0; }
		
		//expresion=Expression
		public Assignment getExpresionAssignment_1() { return cExpresionAssignment_1; }
		
		//Expression
		public RuleCall getExpresionExpressionParserRuleCall_1_0() { return cExpresionExpressionParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class ElementoBloqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.ElementoBloque");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstruccionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReturnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementoBloque:
		//    Instruccion | Return
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Instruccion | Return
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Instruccion
		public RuleCall getInstruccionParserRuleCall_0() { return cInstruccionParserRuleCall_0; }
		
		//Return
		public RuleCall getReturnParserRuleCall_1() { return cReturnParserRuleCall_1; }
	}
	public class CondicionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Condicional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSiEnTuCorazonSientesQueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondicionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondicionExpressionParserRuleCall_1_0 = (RuleCall)cCondicionAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEntoncesDejaQueEstasPalabrasFlorezcanKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInstruccionesThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstruccionesThenElementoBloqueParserRuleCall_4_0 = (RuleCall)cInstruccionesThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPeroSiElDestinoDijeraLoContrarioKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cQueBrotenEstasVerdadesKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cInstruccionesElseAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cInstruccionesElseElementoBloqueParserRuleCall_5_2_0 = (RuleCall)cInstruccionesElseAssignment_5_2.eContents().get(0);
		private final Keyword cYAsElUniversoSigueSuCursoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Condicional:
		//    'Si en tu corazon sientes que' condicion=Expression ','
		//        'entonces deja que estas palabras florezcan:'
		//        instruccionesThen+=ElementoBloque+
		//    ( 'Pero si el destino dijera lo contrario,'
		//        'que broten estas verdades:'
		//        instruccionesElse+=ElementoBloque+ )?
		//    'Y así el universo sigue su curso.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Si en tu corazon sientes que' condicion=Expression ','
		//    'entonces deja que estas palabras florezcan:'
		//    instruccionesThen+=ElementoBloque+
		//( 'Pero si el destino dijera lo contrario,'
		//    'que broten estas verdades:'
		//    instruccionesElse+=ElementoBloque+ )?
		//'Y así el universo sigue su curso.'
		public Group getGroup() { return cGroup; }
		
		//'Si en tu corazon sientes que'
		public Keyword getSiEnTuCorazonSientesQueKeyword_0() { return cSiEnTuCorazonSientesQueKeyword_0; }
		
		//condicion=Expression
		public Assignment getCondicionAssignment_1() { return cCondicionAssignment_1; }
		
		//Expression
		public RuleCall getCondicionExpressionParserRuleCall_1_0() { return cCondicionExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//'entonces deja que estas palabras florezcan:'
		public Keyword getEntoncesDejaQueEstasPalabrasFlorezcanKeyword_3() { return cEntoncesDejaQueEstasPalabrasFlorezcanKeyword_3; }
		
		//instruccionesThen+=ElementoBloque+
		public Assignment getInstruccionesThenAssignment_4() { return cInstruccionesThenAssignment_4; }
		
		//ElementoBloque
		public RuleCall getInstruccionesThenElementoBloqueParserRuleCall_4_0() { return cInstruccionesThenElementoBloqueParserRuleCall_4_0; }
		
		//( 'Pero si el destino dijera lo contrario,'
		//    'que broten estas verdades:'
		//    instruccionesElse+=ElementoBloque+ )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Pero si el destino dijera lo contrario,'
		public Keyword getPeroSiElDestinoDijeraLoContrarioKeyword_5_0() { return cPeroSiElDestinoDijeraLoContrarioKeyword_5_0; }
		
		//'que broten estas verdades:'
		public Keyword getQueBrotenEstasVerdadesKeyword_5_1() { return cQueBrotenEstasVerdadesKeyword_5_1; }
		
		//instruccionesElse+=ElementoBloque+
		public Assignment getInstruccionesElseAssignment_5_2() { return cInstruccionesElseAssignment_5_2; }
		
		//ElementoBloque
		public RuleCall getInstruccionesElseElementoBloqueParserRuleCall_5_2_0() { return cInstruccionesElseElementoBloqueParserRuleCall_5_2_0; }
		
		//'Y así el universo sigue su curso.'
		public Keyword getYAsElUniversoSigueSuCursoKeyword_6() { return cYAsElUniversoSigueSuCursoKeyword_6; }
	}
	public class BucleWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.BucleWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMientrasAunMePiensasKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMientrasANSueEsConEsteMomentoKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCondicionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondicionExpressionParserRuleCall_1_0 = (RuleCall)cCondicionAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHazQueSucedaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLoopBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLoopBodyElementoBloqueParserRuleCall_4_0 = (RuleCall)cLoopBodyAssignment_4.eContents().get(0);
		private final Keyword cYAsElSusurroDescansaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BucleWhile:
		//    ('Mientras aun me piensas' | 'Mientras aún sueñes con este momento')
		//    condicion=Expression ','
		//    'haz que suceda:'
		//    loopBody+=ElementoBloque+
		//    'Y así el susurro descansa.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('Mientras aun me piensas' | 'Mientras aún sueñes con este momento')
		//condicion=Expression ','
		//'haz que suceda:'
		//loopBody+=ElementoBloque+
		//'Y así el susurro descansa.'
		public Group getGroup() { return cGroup; }
		
		//('Mientras aun me piensas' | 'Mientras aún sueñes con este momento')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Mientras aun me piensas'
		public Keyword getMientrasAunMePiensasKeyword_0_0() { return cMientrasAunMePiensasKeyword_0_0; }
		
		//'Mientras aún sueñes con este momento'
		public Keyword getMientrasANSueEsConEsteMomentoKeyword_0_1() { return cMientrasANSueEsConEsteMomentoKeyword_0_1; }
		
		//condicion=Expression
		public Assignment getCondicionAssignment_1() { return cCondicionAssignment_1; }
		
		//Expression
		public RuleCall getCondicionExpressionParserRuleCall_1_0() { return cCondicionExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//'haz que suceda:'
		public Keyword getHazQueSucedaKeyword_3() { return cHazQueSucedaKeyword_3; }
		
		//loopBody+=ElementoBloque+
		public Assignment getLoopBodyAssignment_4() { return cLoopBodyAssignment_4; }
		
		//ElementoBloque
		public RuleCall getLoopBodyElementoBloqueParserRuleCall_4_0() { return cLoopBodyElementoBloqueParserRuleCall_4_0; }
		
		//'Y así el susurro descansa.'
		public Keyword getYAsElSusurroDescansaKeyword_5() { return cYAsElSusurroDescansaKeyword_5; }
	}
	public class BucleForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.BucleFor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnCadaSuspiroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableMI_IDParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cDesdeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInicioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInicioExpressionParserRuleCall_3_0 = (RuleCall)cInicioAssignment_3.eContents().get(0);
		private final Keyword cHastaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFinAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFinExpressionParserRuleCall_5_0 = (RuleCall)cFinAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cConPasoKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPasoAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPasoExpressionParserRuleCall_6_1_0 = (RuleCall)cPasoAssignment_6_1.eContents().get(0);
		private final Keyword cDejaQueElUniversoCanteKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLoopBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLoopBodyElementoBloqueParserRuleCall_8_0 = (RuleCall)cLoopBodyAssignment_8.eContents().get(0);
		private final Keyword cCuandoElLtimoEcoSeCalleKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BucleFor:
		//    'En cada suspiro' variable=MI_ID 'desde' inicio=Expression
		//    'hasta' fin=Expression
		//    ('con paso' paso=Expression)?
		//    'deja que el universo cante:'
		//    loopBody+=ElementoBloque+
		//    'Cuando el último eco se calle.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'En cada suspiro' variable=MI_ID 'desde' inicio=Expression
		//'hasta' fin=Expression
		//('con paso' paso=Expression)?
		//'deja que el universo cante:'
		//loopBody+=ElementoBloque+
		//'Cuando el último eco se calle.'
		public Group getGroup() { return cGroup; }
		
		//'En cada suspiro'
		public Keyword getEnCadaSuspiroKeyword_0() { return cEnCadaSuspiroKeyword_0; }
		
		//variable=MI_ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//MI_ID
		public RuleCall getVariableMI_IDParserRuleCall_1_0() { return cVariableMI_IDParserRuleCall_1_0; }
		
		//'desde'
		public Keyword getDesdeKeyword_2() { return cDesdeKeyword_2; }
		
		//inicio=Expression
		public Assignment getInicioAssignment_3() { return cInicioAssignment_3; }
		
		//Expression
		public RuleCall getInicioExpressionParserRuleCall_3_0() { return cInicioExpressionParserRuleCall_3_0; }
		
		//'hasta'
		public Keyword getHastaKeyword_4() { return cHastaKeyword_4; }
		
		//fin=Expression
		public Assignment getFinAssignment_5() { return cFinAssignment_5; }
		
		//Expression
		public RuleCall getFinExpressionParserRuleCall_5_0() { return cFinExpressionParserRuleCall_5_0; }
		
		//('con paso' paso=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'con paso'
		public Keyword getConPasoKeyword_6_0() { return cConPasoKeyword_6_0; }
		
		//paso=Expression
		public Assignment getPasoAssignment_6_1() { return cPasoAssignment_6_1; }
		
		//Expression
		public RuleCall getPasoExpressionParserRuleCall_6_1_0() { return cPasoExpressionParserRuleCall_6_1_0; }
		
		//'deja que el universo cante:'
		public Keyword getDejaQueElUniversoCanteKeyword_7() { return cDejaQueElUniversoCanteKeyword_7; }
		
		//loopBody+=ElementoBloque+
		public Assignment getLoopBodyAssignment_8() { return cLoopBodyAssignment_8; }
		
		//ElementoBloque
		public RuleCall getLoopBodyElementoBloqueParserRuleCall_8_0() { return cLoopBodyElementoBloqueParserRuleCall_8_0; }
		
		//'Cuando el último eco se calle.'
		public Keyword getCuandoElLtimoEcoSeCalleKeyword_9() { return cCuandoElLtimoEcoSeCalleKeyword_9; }
	}
	public class FuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Funcion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDejoEnEstasLNeasUnaPromesaLlamadaKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEscriboEnEstasLNeasUnaIntenciNLlamadaKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cEnLaBrisaEscondoUnDeseoLlamadoKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMI_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cQueGuardaEnSuEsenciaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametrosAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametrosMI_IDParserRuleCall_2_1_0 = (RuleCall)cParametrosAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametrosAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametrosMI_IDParserRuleCall_2_2_1_0 = (RuleCall)cParametrosAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPrometiendoDevolverKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTipoAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTipoTypeParserRuleCall_3_1_0 = (RuleCall)cTipoAssignment_3_1.eContents().get(0);
		private final Keyword cCuandoLaPromesaSeCumpleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInstruccionesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInstruccionesElementoBloqueParserRuleCall_5_0 = (RuleCall)cInstruccionesAssignment_5.eContents().get(0);
		private final Keyword cAsSeSellaLaPromesaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Funcion:
		//    ('Dejo en estas líneas una promesa llamada' |
		//     'Escribo en estas líneas una intención llamada' |
		//     'En la brisa escondo un deseo llamado') name=MI_ID
		//    ('que guarda en su esencia' parametros+=MI_ID (',' parametros+=MI_ID)*)?
		//    ('prometiendo devolver' tipo=Type)?
		//    'Cuando la promesa se cumple:'
		//        instrucciones+=ElementoBloque+
		//    'Así se sella la promesa.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('Dejo en estas líneas una promesa llamada' |
		// 'Escribo en estas líneas una intención llamada' |
		// 'En la brisa escondo un deseo llamado') name=MI_ID
		//('que guarda en su esencia' parametros+=MI_ID (',' parametros+=MI_ID)*)?
		//('prometiendo devolver' tipo=Type)?
		//'Cuando la promesa se cumple:'
		//    instrucciones+=ElementoBloque+
		//'Así se sella la promesa.'
		public Group getGroup() { return cGroup; }
		
		//('Dejo en estas líneas una promesa llamada' |
		// 'Escribo en estas líneas una intención llamada' |
		// 'En la brisa escondo un deseo llamado')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Dejo en estas líneas una promesa llamada'
		public Keyword getDejoEnEstasLNeasUnaPromesaLlamadaKeyword_0_0() { return cDejoEnEstasLNeasUnaPromesaLlamadaKeyword_0_0; }
		
		//'Escribo en estas líneas una intención llamada'
		public Keyword getEscriboEnEstasLNeasUnaIntenciNLlamadaKeyword_0_1() { return cEscriboEnEstasLNeasUnaIntenciNLlamadaKeyword_0_1; }
		
		//'En la brisa escondo un deseo llamado'
		public Keyword getEnLaBrisaEscondoUnDeseoLlamadoKeyword_0_2() { return cEnLaBrisaEscondoUnDeseoLlamadoKeyword_0_2; }
		
		//name=MI_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//MI_ID
		public RuleCall getNameMI_IDParserRuleCall_1_0() { return cNameMI_IDParserRuleCall_1_0; }
		
		//('que guarda en su esencia' parametros+=MI_ID (',' parametros+=MI_ID)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'que guarda en su esencia'
		public Keyword getQueGuardaEnSuEsenciaKeyword_2_0() { return cQueGuardaEnSuEsenciaKeyword_2_0; }
		
		//parametros+=MI_ID
		public Assignment getParametrosAssignment_2_1() { return cParametrosAssignment_2_1; }
		
		//MI_ID
		public RuleCall getParametrosMI_IDParserRuleCall_2_1_0() { return cParametrosMI_IDParserRuleCall_2_1_0; }
		
		//(',' parametros+=MI_ID)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//parametros+=MI_ID
		public Assignment getParametrosAssignment_2_2_1() { return cParametrosAssignment_2_2_1; }
		
		//MI_ID
		public RuleCall getParametrosMI_IDParserRuleCall_2_2_1_0() { return cParametrosMI_IDParserRuleCall_2_2_1_0; }
		
		//('prometiendo devolver' tipo=Type)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'prometiendo devolver'
		public Keyword getPrometiendoDevolverKeyword_3_0() { return cPrometiendoDevolverKeyword_3_0; }
		
		//tipo=Type
		public Assignment getTipoAssignment_3_1() { return cTipoAssignment_3_1; }
		
		//Type
		public RuleCall getTipoTypeParserRuleCall_3_1_0() { return cTipoTypeParserRuleCall_3_1_0; }
		
		//'Cuando la promesa se cumple:'
		public Keyword getCuandoLaPromesaSeCumpleKeyword_4() { return cCuandoLaPromesaSeCumpleKeyword_4; }
		
		//instrucciones+=ElementoBloque+
		public Assignment getInstruccionesAssignment_5() { return cInstruccionesAssignment_5; }
		
		//ElementoBloque
		public RuleCall getInstruccionesElementoBloqueParserRuleCall_5_0() { return cInstruccionesElementoBloqueParserRuleCall_5_0; }
		
		//'Así se sella la promesa.'
		public Keyword getAsSeSellaLaPromesaKeyword_6() { return cAsSeSellaLaPromesaKeyword_6; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cYEntregoAlVientoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpresionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpresionExpressionParserRuleCall_1_0 = (RuleCall)cExpresionAssignment_1.eContents().get(0);
		private final Keyword cComoPromesaCumplidaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Return:
		//    'Y entrego al viento' expresion=Expression 'como promesa cumplida.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Y entrego al viento' expresion=Expression 'como promesa cumplida.'
		public Group getGroup() { return cGroup; }
		
		//'Y entrego al viento'
		public Keyword getYEntregoAlVientoKeyword_0() { return cYEntregoAlVientoKeyword_0; }
		
		//expresion=Expression
		public Assignment getExpresionAssignment_1() { return cExpresionAssignment_1; }
		
		//Expression
		public RuleCall getExpresionExpressionParserRuleCall_1_0() { return cExpresionExpressionParserRuleCall_1_0; }
		
		//'como promesa cumplida.'
		public Keyword getComoPromesaCumplidaKeyword_2() { return cComoPromesaCumplidaKeyword_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Expression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Sistema de expresiones
		//Expression:
		//    OrExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cOQuizSKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cOQuizSKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression returns Expression:
		//    AndExpression ({OrExpression.left=current}
		//        (' o quizás ' | ' o quizás') right=AndExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left=current}
		//    (' o quizás ' | ' o quizás') right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current}
		//       (' o quizás ' | ' o quizás') right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//(' o quizás ' | ' o quizás')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//' o quizás '
		public Keyword getOQuizSKeyword_1_1_0() { return cOQuizSKeyword_1_1_0; }
		
		//' o quizás'
		public Keyword getOQuizSKeyword_1_1_1() { return cOQuizSKeyword_1_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cYTambiNKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cYTambiNKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression returns Expression:
		//    EqualityExpression ({AndExpression.left=current}
		//        (' y también ' | ' y también') right=EqualityExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({AndExpression.left=current}
		//    (' y también ' | ' y también') right=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current}
		//       (' y también ' | ' y también') right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//(' y también ' | ' y también')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//' y también '
		public Keyword getYTambiNKeyword_1_1_0() { return cYTambiNKeyword_1_1_0; }
		
		//' y también'
		public Keyword getYTambiNKeyword_1_1_1() { return cYTambiNKeyword_1_1_1; }
		
		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLateAlUnSonoConKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpCantaConUnMatizDistintoAKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpression returns Expression:
		//    RelationalExpression ({EqualityExpression.left=current}
		//        op=('late al unísono con' | 'canta con un matiz distinto a')
		//        right=RelationalExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpression ({EqualityExpression.left=current}
		//    op=('late al unísono con' | 'canta con un matiz distinto a')
		//    right=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }
		
		//({EqualityExpression.left=current}
		//       op=('late al unísono con' | 'canta con un matiz distinto a')
		//       right=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqualityExpression.left=current}
		public Action getEqualityExpressionLeftAction_1_0() { return cEqualityExpressionLeftAction_1_0; }
		
		//op=('late al unísono con' | 'canta con un matiz distinto a')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('late al unísono con' | 'canta con un matiz distinto a')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'late al unísono con'
		public Keyword getOpLateAlUnSonoConKeyword_1_1_0_0() { return cOpLateAlUnSonoConKeyword_1_1_0_0; }
		
		//'canta con un matiz distinto a'
		public Keyword getOpCantaConUnMatizDistintoAKeyword_1_1_0_1() { return cOpCantaConUnMatizDistintoAKeyword_1_1_0_1; }
		
		//right=RelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_2_0() { return cRightRelationalExpressionParserRuleCall_1_2_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpSusurraConMenosFuerzaQueKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpCasiSuspiraAlMismoNivelQueKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpArdeConMSPasiNQueKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpRodeaConTantaFuerzaComoKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelationalExpression returns Expression:
		//    AdditiveExpression ({RelationalExpression.left=current}
		//        op=('susurra con menos fuerza que' | 'casi suspira al mismo nivel que' |
		//            'arde con más pasión que' | 'rodea con tanta fuerza como')
		//        right=AdditiveExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({RelationalExpression.left=current}
		//    op=('susurra con menos fuerza que' | 'casi suspira al mismo nivel que' |
		//        'arde con más pasión que' | 'rodea con tanta fuerza como')
		//    right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({RelationalExpression.left=current}
		//       op=('susurra con menos fuerza que' | 'casi suspira al mismo nivel que' |
		//           'arde con más pasión que' | 'rodea con tanta fuerza como')
		//       right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelationalExpression.left=current}
		public Action getRelationalExpressionLeftAction_1_0() { return cRelationalExpressionLeftAction_1_0; }
		
		//op=('susurra con menos fuerza que' | 'casi suspira al mismo nivel que' |
		//    'arde con más pasión que' | 'rodea con tanta fuerza como')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('susurra con menos fuerza que' | 'casi suspira al mismo nivel que' |
		//            'arde con más pasión que' | 'rodea con tanta fuerza como')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'susurra con menos fuerza que'
		public Keyword getOpSusurraConMenosFuerzaQueKeyword_1_1_0_0() { return cOpSusurraConMenosFuerzaQueKeyword_1_1_0_0; }
		
		//'casi suspira al mismo nivel que'
		public Keyword getOpCasiSuspiraAlMismoNivelQueKeyword_1_1_0_1() { return cOpCasiSuspiraAlMismoNivelQueKeyword_1_1_0_1; }
		
		//'arde con más pasión que'
		public Keyword getOpArdeConMSPasiNQueKeyword_1_1_0_2() { return cOpArdeConMSPasiNQueKeyword_1_1_0_2; }
		
		//'rodea con tanta fuerza como'
		public Keyword getOpRodeaConTantaFuerzaComoKeyword_1_1_0_3() { return cOpRodeaConTantaFuerzaComoKeyword_1_1_0_3; }
		
		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditiveExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpUnidosEnUnSoloSuspiroConKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpFundidosEnLaLlamaDeKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression returns Expression:
		//    MultiplicativeExpression ({AdditiveExpression.left=current}
		//        op=('unidos en un solo suspiro con' | 'fundidos en la llama de')
		//        right=MultiplicativeExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({AdditiveExpression.left=current}
		//    op=('unidos en un solo suspiro con' | 'fundidos en la llama de')
		//    right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({AdditiveExpression.left=current}
		//       op=('unidos en un solo suspiro con' | 'fundidos en la llama de')
		//       right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AdditiveExpression.left=current}
		public Action getAdditiveExpressionLeftAction_1_0() { return cAdditiveExpressionLeftAction_1_0; }
		
		//op=('unidos en un solo suspiro con' | 'fundidos en la llama de')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('unidos en un solo suspiro con' | 'fundidos en la llama de')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'unidos en un solo suspiro con'
		public Keyword getOpUnidosEnUnSoloSuspiroConKeyword_1_1_0_0() { return cOpUnidosEnUnSoloSuspiroConKeyword_1_1_0_0; }
		
		//'fundidos en la llama de'
		public Keyword getOpFundidosEnLaLlamaDeKeyword_1_1_0_1() { return cOpFundidosEnLaLlamaDeKeyword_1_1_0_1; }
		
		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicativeExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpFortalecidosPorElFuegoDeKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSeparadosEntreLosEcosDeKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpResuenaConElEcoDeKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//    UnaryExpression ({MultiplicativeExpression.left=current}
		//        op=('fortalecidos por el fuego de' | 'separados entre los ecos de' | 'resuena con el eco de')
		//        right=UnaryExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ({MultiplicativeExpression.left=current}
		//    op=('fortalecidos por el fuego de' | 'separados entre los ecos de' | 'resuena con el eco de')
		//    right=UnaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//({MultiplicativeExpression.left=current}
		//       op=('fortalecidos por el fuego de' | 'separados entre los ecos de' | 'resuena con el eco de')
		//       right=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplicativeExpression.left=current}
		public Action getMultiplicativeExpressionLeftAction_1_0() { return cMultiplicativeExpressionLeftAction_1_0; }
		
		//op=('fortalecidos por el fuego de' | 'separados entre los ecos de' | 'resuena con el eco de')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('fortalecidos por el fuego de' | 'separados entre los ecos de' | 'resuena con el eco de')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'fortalecidos por el fuego de'
		public Keyword getOpFortalecidosPorElFuegoDeKeyword_1_1_0_0() { return cOpFortalecidosPorElFuegoDeKeyword_1_1_0_0; }
		
		//'separados entre los ecos de'
		public Keyword getOpSeparadosEntreLosEcosDeKeyword_1_1_0_1() { return cOpSeparadosEntreLosEcosDeKeyword_1_1_0_1; }
		
		//'resuena con el eco de'
		public Keyword getOpResuenaConElEcoDeKeyword_1_1_0_2() { return cOpResuenaConElEcoDeKeyword_1_1_0_2; }
		
		//right=UnaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_2_0() { return cRightUnaryExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOpNoCreoQueKeyword_0_1_0 = (Keyword)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpression returns Expression:
		//    {UnaryExpression} op=('no creo que') expression=UnaryExpression
		//    | PrimaryExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryExpression} op=('no creo que') expression=UnaryExpression
		//| PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{UnaryExpression} op=('no creo que') expression=UnaryExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{UnaryExpression}
		public Action getUnaryExpressionAction_0_0() { return cUnaryExpressionAction_0_0; }
		
		//op=('no creo que')
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//('no creo que')
		public Keyword getOpNoCreoQueKeyword_0_1_0() { return cOpNoCreoQueKeyword_0_1_0; }
		
		//expression=UnaryExpression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_0_2_0() { return cExpressionUnaryExpressionParserRuleCall_0_2_0; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueIntAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueIntINTTerminalRuleCall_1_1_0 = (RuleCall)cValueIntAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueStringAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueStringSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueStringAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueBooleanAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueBooleanAlternatives_3_1_0 = (Alternatives)cValueBooleanAssignment_3_1.eContents().get(0);
		private final Keyword cValueBooleanSiempreKeyword_3_1_0_0 = (Keyword)cValueBooleanAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueBooleanJamSKeyword_3_1_0_1 = (Keyword)cValueBooleanAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cVariableReferenceAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PrimaryExpression returns Expression:
		//    '(' Expression ')'
		//    | {NumberLiteral} valueInt=INT
		//    | {StringLiteral} valueString=STRING
		//    | {BooleanLiteral} valueBoolean=('siempre' | 'jamás')
		//    | {VariableReference} name=ID
		//    | FunctionCall
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')'
		//| {NumberLiteral} valueInt=INT
		//| {StringLiteral} valueString=STRING
		//| {BooleanLiteral} valueBoolean=('siempre' | 'jamás')
		//| {VariableReference} name=ID
		//| FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{NumberLiteral} valueInt=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }
		
		//valueInt=INT
		public Assignment getValueIntAssignment_1_1() { return cValueIntAssignment_1_1; }
		
		//INT
		public RuleCall getValueIntINTTerminalRuleCall_1_1_0() { return cValueIntINTTerminalRuleCall_1_1_0; }
		
		//{StringLiteral} valueString=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_2_0() { return cStringLiteralAction_2_0; }
		
		//valueString=STRING
		public Assignment getValueStringAssignment_2_1() { return cValueStringAssignment_2_1; }
		
		//STRING
		public RuleCall getValueStringSTRINGTerminalRuleCall_2_1_0() { return cValueStringSTRINGTerminalRuleCall_2_1_0; }
		
		//{BooleanLiteral} valueBoolean=('siempre' | 'jamás')
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_3_0() { return cBooleanLiteralAction_3_0; }
		
		//valueBoolean=('siempre' | 'jamás')
		public Assignment getValueBooleanAssignment_3_1() { return cValueBooleanAssignment_3_1; }
		
		//('siempre' | 'jamás')
		public Alternatives getValueBooleanAlternatives_3_1_0() { return cValueBooleanAlternatives_3_1_0; }
		
		//'siempre'
		public Keyword getValueBooleanSiempreKeyword_3_1_0_0() { return cValueBooleanSiempreKeyword_3_1_0_0; }
		
		//'jamás'
		public Keyword getValueBooleanJamSKeyword_3_1_0_1() { return cValueBooleanJamSKeyword_3_1_0_1; }
		
		//{VariableReference} name=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//{VariableReference}
		public Action getVariableReferenceAction_4_0() { return cVariableReferenceAction_4_0; }
		
		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_5() { return cFunctionCallParserRuleCall_5; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInvocoAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameFuncionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameFuncionMI_IDCrossReference_2_0 = (CrossReference)cNameFuncionAssignment_2.eContents().get(0);
		private final RuleCall cNameFuncionMI_IDIDTerminalRuleCall_2_0_1 = (RuleCall)cNameFuncionMI_IDCrossReference_2_0.eContents().get(1);
		private final Assignment cComentarioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComentarioCommentParserRuleCall_3_0 = (RuleCall)cComentarioAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConLosRegalosKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cArgsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_4_1_0_0 = (RuleCall)cArgsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cYKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_4_1_1_1_0 = (RuleCall)cArgsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cEnMiCorazNKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//FunctionCall returns Expression:
		//    {FunctionCall}  // Esto fuerza a crear una clase concreta
		//    'invoco a' (nameFuncion=[MI_ID])
		//    comentario=Comment?
		//    ('con los regalos' (args+=Expression ('y' args+=Expression)*)?
		//    'en mi corazón')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionCall}  // Esto fuerza a crear una clase concreta
		//'invoco a' (nameFuncion=[MI_ID])
		//comentario=Comment?
		//('con los regalos' (args+=Expression ('y' args+=Expression)*)?
		//'en mi corazón')
		public Group getGroup() { return cGroup; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }
		
		//// Esto fuerza a crear una clase concreta
		//  'invoco a'
		public Keyword getInvocoAKeyword_1() { return cInvocoAKeyword_1; }
		
		//(nameFuncion=[MI_ID])
		public Assignment getNameFuncionAssignment_2() { return cNameFuncionAssignment_2; }
		
		//[MI_ID]
		public CrossReference getNameFuncionMI_IDCrossReference_2_0() { return cNameFuncionMI_IDCrossReference_2_0; }
		
		//ID
		public RuleCall getNameFuncionMI_IDIDTerminalRuleCall_2_0_1() { return cNameFuncionMI_IDIDTerminalRuleCall_2_0_1; }
		
		//comentario=Comment?
		public Assignment getComentarioAssignment_3() { return cComentarioAssignment_3; }
		
		//Comment
		public RuleCall getComentarioCommentParserRuleCall_3_0() { return cComentarioCommentParserRuleCall_3_0; }
		
		//('con los regalos' (args+=Expression ('y' args+=Expression)*)?
		//'en mi corazón')
		public Group getGroup_4() { return cGroup_4; }
		
		//'con los regalos'
		public Keyword getConLosRegalosKeyword_4_0() { return cConLosRegalosKeyword_4_0; }
		
		//(args+=Expression ('y' args+=Expression)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//args+=Expression
		public Assignment getArgsAssignment_4_1_0() { return cArgsAssignment_4_1_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_4_1_0_0() { return cArgsExpressionParserRuleCall_4_1_0_0; }
		
		//('y' args+=Expression)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//'y'
		public Keyword getYKeyword_4_1_1_0() { return cYKeyword_4_1_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_4_1_1_1() { return cArgsAssignment_4_1_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_4_1_1_1_0() { return cArgsExpressionParserRuleCall_4_1_1_1_0; }
		
		//'en mi corazón'
		public Keyword getEnMiCorazNKeyword_4_2() { return cEnMiCorazNKeyword_4_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNMeroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTextoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBooleanoKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNadaKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//// Sistema de tipos
		//Type: 'número' | 'texto' | 'booleano' | 'nada';
		@Override public ParserRule getRule() { return rule; }
		
		//'número' | 'texto' | 'booleano' | 'nada'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'número'
		public Keyword getNMeroKeyword_0() { return cNMeroKeyword_0; }
		
		//'texto'
		public Keyword getTextoKeyword_1() { return cTextoKeyword_1; }
		
		//'booleano'
		public Keyword getBooleanoKeyword_2() { return cBooleanoKeyword_2; }
		
		//'nada'
		public Keyword getNadaKeyword_3() { return cNadaKeyword_3; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Comment");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueANYTEXTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// Comentarios ultra-flexibles
		//Comment:
		//    value=ANYTEXT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ANYTEXT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ANYTEXT
		public RuleCall getValueANYTEXTTerminalRuleCall_0() { return cValueANYTEXTTerminalRuleCall_0; }
	}
	public class MI_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.MI_ID");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// Terminales
		//MI_ID: name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VerboDeclaracionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.VerboDeclaracion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTeRegaloKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOfrezcoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cObsequioKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDepositoEnTuJardNKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//VerboDeclaracion: 'Te regalo' | 'Ofrezco' | 'Obsequio' | 'Deposito en tu jardín';
		@Override public ParserRule getRule() { return rule; }
		
		//'Te regalo' | 'Ofrezco' | 'Obsequio' | 'Deposito en tu jardín'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Te regalo'
		public Keyword getTeRegaloKeyword_0() { return cTeRegaloKeyword_0; }
		
		//'Ofrezco'
		public Keyword getOfrezcoKeyword_1() { return cOfrezcoKeyword_1; }
		
		//'Obsequio'
		public Keyword getObsequioKeyword_2() { return cObsequioKeyword_2; }
		
		//'Deposito en tu jardín'
		public Keyword getDepositoEnTuJardNKeyword_3() { return cDepositoEnTuJardNKeyword_3; }
	}
	public class VerboReasignacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.VerboReasignacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPermTemeAlimentarKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPermTemeRegarKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPermTemeAjustarKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//VerboReasignacion: 'Permíteme alimentar' | 'Permíteme regar' | 'Permíteme ajustar';
		@Override public ParserRule getRule() { return rule; }
		
		//'Permíteme alimentar' | 'Permíteme regar' | 'Permíteme ajustar'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Permíteme alimentar'
		public Keyword getPermTemeAlimentarKeyword_0() { return cPermTemeAlimentarKeyword_0; }
		
		//'Permíteme regar'
		public Keyword getPermTemeRegarKeyword_1() { return cPermTemeRegarKeyword_1; }
		
		//'Permíteme ajustar'
		public Keyword getPermTemeAjustarKeyword_2() { return cPermTemeAjustarKeyword_2; }
	}
	public class ArticuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Articulo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUnKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Articulo: 'un' | 'una';
		@Override public ParserRule getRule() { return rule; }
		
		//'un' | 'una'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'un'
		public Keyword getUnKeyword_0() { return cUnKeyword_0; }
		
		//'una'
		public Keyword getUnaKeyword_1() { return cUnaKeyword_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final CartaElements pCarta;
	private final SaludoElements pSaludo;
	private final DespedidaElements pDespedida;
	private final CuerpoElements pCuerpo;
	private final InstruccionElements pInstruccion;
	private final DeclararElements pDeclarar;
	private final ReasignarElements pReasignar;
	private final EntradaElements pEntrada;
	private final SalidaElements pSalida;
	private final ElementoBloqueElements pElementoBloque;
	private final CondicionalElements pCondicional;
	private final BucleWhileElements pBucleWhile;
	private final BucleForElements pBucleFor;
	private final FuncionElements pFuncion;
	private final ReturnElements pReturn;
	private final ExpressionElements pExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final FunctionCallElements pFunctionCall;
	private final TypeElements pType;
	private final CommentElements pComment;
	private final MI_IDElements pMI_ID;
	private final VerboDeclaracionElements pVerboDeclaracion;
	private final VerboReasignacionElements pVerboReasignacion;
	private final ArticuloElements pArticulo;
	private final TerminalRule tANYTEXT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DearCodeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pCarta = new CartaElements();
		this.pSaludo = new SaludoElements();
		this.pDespedida = new DespedidaElements();
		this.pCuerpo = new CuerpoElements();
		this.pInstruccion = new InstruccionElements();
		this.pDeclarar = new DeclararElements();
		this.pReasignar = new ReasignarElements();
		this.pEntrada = new EntradaElements();
		this.pSalida = new SalidaElements();
		this.pElementoBloque = new ElementoBloqueElements();
		this.pCondicional = new CondicionalElements();
		this.pBucleWhile = new BucleWhileElements();
		this.pBucleFor = new BucleForElements();
		this.pFuncion = new FuncionElements();
		this.pReturn = new ReturnElements();
		this.pExpression = new ExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pType = new TypeElements();
		this.pComment = new CommentElements();
		this.pMI_ID = new MI_IDElements();
		this.pVerboDeclaracion = new VerboDeclaracionElements();
		this.pVerboReasignacion = new VerboReasignacionElements();
		this.pArticulo = new ArticuloElements();
		this.tANYTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.ANYTEXT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.DearCode".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//    carta=Carta
	//;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Carta:
	//    saludo=Saludo
	//    cuerpo=Cuerpo
	//    despedida=Despedida
	//;
	public CartaElements getCartaAccess() {
		return pCarta;
	}
	
	public ParserRule getCartaRule() {
		return getCartaAccess().getRule();
	}
	
	//Saludo: ('Querido'|'Querida') name=ID '.';
	public SaludoElements getSaludoAccess() {
		return pSaludo;
	}
	
	public ParserRule getSaludoRule() {
		return getSaludoAccess().getRule();
	}
	
	//Despedida: 'Con cariño, Tu programador' name=ID '.';
	public DespedidaElements getDespedidaAccess() {
		return pDespedida;
	}
	
	public ParserRule getDespedidaRule() {
		return getDespedidaAccess().getRule();
	}
	
	//Cuerpo: instrucciones+=Instruccion+;
	public CuerpoElements getCuerpoAccess() {
		return pCuerpo;
	}
	
	public ParserRule getCuerpoRule() {
		return getCuerpoAccess().getRule();
	}
	
	//Instruccion:
	//    Declarar | Reasignar | Condicional
	//    | BucleWhile | BucleFor | Entrada | Salida | Funcion | FunctionCall
	//;
	public InstruccionElements getInstruccionAccess() {
		return pInstruccion;
	}
	
	public ParserRule getInstruccionRule() {
		return getInstruccionAccess().getRule();
	}
	
	//Declarar:
	//    verboDecl=VerboDeclaracion
	//    articulo=Articulo
	//    sustantivo=MI_ID
	//    preComentario=Comment?
	//    valor=Expression
	//    postComentario=Comment?
	//    '.'
	//;
	public DeclararElements getDeclararAccess() {
		return pDeclarar;
	}
	
	public ParserRule getDeclararRule() {
		return getDeclararAccess().getRule();
	}
	
	//Reasignar:
	//    verboReas=VerboReasignacion
	//    preComentario=Comment?
	//    sustantivo=MI_ID
	//    postComentario=Comment?
	//    valor=Expression
	//    comentario=Comment?
	//    '.'
	//;
	public ReasignarElements getReasignarAccess() {
		return pReasignar;
	}
	
	public ParserRule getReasignarRule() {
		return getReasignarAccess().getRule();
	}
	
	//Entrada:
	//    'Le pedí al lector que me dijera' variable=MI_ID
	//    ("en un susurro numérico" | "con palabras de terciopelo")?
	//    '.'
	//;
	public EntradaElements getEntradaAccess() {
		return pEntrada;
	}
	
	public ParserRule getEntradaRule() {
		return getEntradaAccess().getRule();
	}
	
	//Salida:
	//    'Hoy le quise contar al mundo sobre:' expresion=Expression '.'
	//;
	public SalidaElements getSalidaAccess() {
		return pSalida;
	}
	
	public ParserRule getSalidaRule() {
		return getSalidaAccess().getRule();
	}
	
	//ElementoBloque:
	//    Instruccion | Return
	//;
	public ElementoBloqueElements getElementoBloqueAccess() {
		return pElementoBloque;
	}
	
	public ParserRule getElementoBloqueRule() {
		return getElementoBloqueAccess().getRule();
	}
	
	//Condicional:
	//    'Si en tu corazon sientes que' condicion=Expression ','
	//        'entonces deja que estas palabras florezcan:'
	//        instruccionesThen+=ElementoBloque+
	//    ( 'Pero si el destino dijera lo contrario,'
	//        'que broten estas verdades:'
	//        instruccionesElse+=ElementoBloque+ )?
	//    'Y así el universo sigue su curso.'
	//;
	public CondicionalElements getCondicionalAccess() {
		return pCondicional;
	}
	
	public ParserRule getCondicionalRule() {
		return getCondicionalAccess().getRule();
	}
	
	//BucleWhile:
	//    ('Mientras aun me piensas' | 'Mientras aún sueñes con este momento')
	//    condicion=Expression ','
	//    'haz que suceda:'
	//    loopBody+=ElementoBloque+
	//    'Y así el susurro descansa.'
	//;
	public BucleWhileElements getBucleWhileAccess() {
		return pBucleWhile;
	}
	
	public ParserRule getBucleWhileRule() {
		return getBucleWhileAccess().getRule();
	}
	
	//BucleFor:
	//    'En cada suspiro' variable=MI_ID 'desde' inicio=Expression
	//    'hasta' fin=Expression
	//    ('con paso' paso=Expression)?
	//    'deja que el universo cante:'
	//    loopBody+=ElementoBloque+
	//    'Cuando el último eco se calle.'
	//;
	public BucleForElements getBucleForAccess() {
		return pBucleFor;
	}
	
	public ParserRule getBucleForRule() {
		return getBucleForAccess().getRule();
	}
	
	//Funcion:
	//    ('Dejo en estas líneas una promesa llamada' |
	//     'Escribo en estas líneas una intención llamada' |
	//     'En la brisa escondo un deseo llamado') name=MI_ID
	//    ('que guarda en su esencia' parametros+=MI_ID (',' parametros+=MI_ID)*)?
	//    ('prometiendo devolver' tipo=Type)?
	//    'Cuando la promesa se cumple:'
	//        instrucciones+=ElementoBloque+
	//    'Así se sella la promesa.'
	//;
	public FuncionElements getFuncionAccess() {
		return pFuncion;
	}
	
	public ParserRule getFuncionRule() {
		return getFuncionAccess().getRule();
	}
	
	//Return:
	//    'Y entrego al viento' expresion=Expression 'como promesa cumplida.'
	//;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//// Sistema de expresiones
	//Expression:
	//    OrExpression
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//OrExpression returns Expression:
	//    AndExpression ({OrExpression.left=current}
	//        (' o quizás ' | ' o quizás') right=AndExpression)*
	//;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression returns Expression:
	//    EqualityExpression ({AndExpression.left=current}
	//        (' y también ' | ' y también') right=EqualityExpression)*
	//;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualityExpression returns Expression:
	//    RelationalExpression ({EqualityExpression.left=current}
	//        op=('late al unísono con' | 'canta con un matiz distinto a')
	//        right=RelationalExpression)*
	//;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression returns Expression:
	//    AdditiveExpression ({RelationalExpression.left=current}
	//        op=('susurra con menos fuerza que' | 'casi suspira al mismo nivel que' |
	//            'arde con más pasión que' | 'rodea con tanta fuerza como')
	//        right=AdditiveExpression)*
	//;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//AdditiveExpression returns Expression:
	//    MultiplicativeExpression ({AdditiveExpression.left=current}
	//        op=('unidos en un solo suspiro con' | 'fundidos en la llama de')
	//        right=MultiplicativeExpression)*
	//;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression returns Expression:
	//    UnaryExpression ({MultiplicativeExpression.left=current}
	//        op=('fortalecidos por el fuego de' | 'separados entre los ecos de' | 'resuena con el eco de')
	//        right=UnaryExpression)*
	//;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//UnaryExpression returns Expression:
	//    {UnaryExpression} op=('no creo que') expression=UnaryExpression
	//    | PrimaryExpression
	//;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//PrimaryExpression returns Expression:
	//    '(' Expression ')'
	//    | {NumberLiteral} valueInt=INT
	//    | {StringLiteral} valueString=STRING
	//    | {BooleanLiteral} valueBoolean=('siempre' | 'jamás')
	//    | {VariableReference} name=ID
	//    | FunctionCall
	//;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//FunctionCall returns Expression:
	//    {FunctionCall}  // Esto fuerza a crear una clase concreta
	//    'invoco a' (nameFuncion=[MI_ID])
	//    comentario=Comment?
	//    ('con los regalos' (args+=Expression ('y' args+=Expression)*)?
	//    'en mi corazón')
	//;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Sistema de tipos
	//Type: 'número' | 'texto' | 'booleano' | 'nada';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//// Comentarios ultra-flexibles
	//Comment:
	//    value=ANYTEXT
	//;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//// Terminales
	//MI_ID: name=ID;
	public MI_IDElements getMI_IDAccess() {
		return pMI_ID;
	}
	
	public ParserRule getMI_IDRule() {
		return getMI_IDAccess().getRule();
	}
	
	//VerboDeclaracion: 'Te regalo' | 'Ofrezco' | 'Obsequio' | 'Deposito en tu jardín';
	public VerboDeclaracionElements getVerboDeclaracionAccess() {
		return pVerboDeclaracion;
	}
	
	public ParserRule getVerboDeclaracionRule() {
		return getVerboDeclaracionAccess().getRule();
	}
	
	//VerboReasignacion: 'Permíteme alimentar' | 'Permíteme regar' | 'Permíteme ajustar';
	public VerboReasignacionElements getVerboReasignacionAccess() {
		return pVerboReasignacion;
	}
	
	public ParserRule getVerboReasignacionRule() {
		return getVerboReasignacionAccess().getRule();
	}
	
	//Articulo: 'un' | 'una';
	public ArticuloElements getArticuloAccess() {
		return pArticulo;
	}
	
	public ParserRule getArticuloRule() {
		return getArticuloAccess().getRule();
	}
	
	//terminal ANYTEXT:
	//    '~'
	//    (
	//      // Cualquier caracter Unicode excepto ~ y salto de línea
	//      !('~' | '\n' | '\r')
	//    )*
	//    '~'
	//;
	public TerminalRule getANYTEXTRule() {
		return tANYTEXT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
