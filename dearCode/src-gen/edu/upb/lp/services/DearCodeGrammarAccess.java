/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DearCodeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCartasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCartasCartaParserRuleCall_2_0 = (RuleCall)cCartasAssignment_2.eContents().get(0);
		
		//Program:
		//    name=ID ':' cartas+=Carta+;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' cartas+=Carta+
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//cartas+=Carta+
		public Assignment getCartasAssignment_2() { return cCartasAssignment_2; }
		
		//Carta
		public RuleCall getCartasCartaParserRuleCall_2_0() { return cCartasCartaParserRuleCall_2_0; }
	}
	public class CartaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Carta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSaludoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSaludoSaludoParserRuleCall_0_0 = (RuleCall)cSaludoAssignment_0.eContents().get(0);
		private final Assignment cCuerpoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCuerpoCuerpoParserRuleCall_1_0 = (RuleCall)cCuerpoAssignment_1.eContents().get(0);
		private final Assignment cDespedidaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDespedidaDespedidaParserRuleCall_2_0 = (RuleCall)cDespedidaAssignment_2.eContents().get(0);
		
		//Carta:
		//    saludo=Saludo cuerpo=Cuerpo despedida=Despedida;
		@Override public ParserRule getRule() { return rule; }
		
		//saludo=Saludo cuerpo=Cuerpo despedida=Despedida
		public Group getGroup() { return cGroup; }
		
		//saludo=Saludo
		public Assignment getSaludoAssignment_0() { return cSaludoAssignment_0; }
		
		//Saludo
		public RuleCall getSaludoSaludoParserRuleCall_0_0() { return cSaludoSaludoParserRuleCall_0_0; }
		
		//cuerpo=Cuerpo
		public Assignment getCuerpoAssignment_1() { return cCuerpoAssignment_1; }
		
		//Cuerpo
		public RuleCall getCuerpoCuerpoParserRuleCall_1_0() { return cCuerpoCuerpoParserRuleCall_1_0; }
		
		//despedida=Despedida
		public Assignment getDespedidaAssignment_2() { return cDespedidaAssignment_2; }
		
		//Despedida
		public RuleCall getDespedidaDespedidaParserRuleCall_2_0() { return cDespedidaDespedidaParserRuleCall_2_0; }
	}
	public class SaludoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Saludo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueridoCompiladorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Saludo:
		//    'Querido compilador:' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Querido compilador:' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Querido compilador:'
		public Keyword getQueridoCompiladorKeyword_0() { return cQueridoCompiladorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DespedidaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Despedida");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConCariOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTuProgramadorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Despedida:
		//    'Con cariño,' 'Tu programador' name=ID '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'Con cariño,' 'Tu programador' name=ID '.'
		public Group getGroup() { return cGroup; }
		
		//'Con cariño,'
		public Keyword getConCariOKeyword_0() { return cConCariOKeyword_0; }
		
		//'Tu programador'
		public Keyword getTuProgramadorKeyword_1() { return cTuProgramadorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class CuerpoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Cuerpo");
		private final Assignment cInstruccionesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstruccionesInstruccionParserRuleCall_0 = (RuleCall)cInstruccionesAssignment.eContents().get(0);
		
		//Cuerpo:
		//    instrucciones+=Instruccion*;
		@Override public ParserRule getRule() { return rule; }
		
		//instrucciones+=Instruccion*
		public Assignment getInstruccionesAssignment() { return cInstruccionesAssignment; }
		
		//Instruccion
		public RuleCall getInstruccionesInstruccionParserRuleCall_0() { return cInstruccionesInstruccionParserRuleCall_0; }
	}
	public class InstruccionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Instruccion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCondicionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBucleWhileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBucleForParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Instruccion:
		//    Condicional | BucleWhile | BucleFor;
		@Override public ParserRule getRule() { return rule; }
		
		//Condicional | BucleWhile | BucleFor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Condicional
		public RuleCall getCondicionalParserRuleCall_0() { return cCondicionalParserRuleCall_0; }
		
		//BucleWhile
		public RuleCall getBucleWhileParserRuleCall_1() { return cBucleWhileParserRuleCall_1; }
		
		//BucleFor
		public RuleCall getBucleForParserRuleCall_2() { return cBucleForParserRuleCall_2; }
	}
	public class CondicionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Condicion");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condicion:
		//    Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Expression");
		private final RuleCall cOrExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//    OrExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpr
		public RuleCall getOrExprParserRuleCall() { return cOrExprParserRuleCall; }
	}
	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOQuizSKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpr returns Expression:
		//    AndExpr ({OrExpr.left=current} 'o quizás' right=AndExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpr ({OrExpr.left=current} 'o quizás' right=AndExpr)*
		public Group getGroup() { return cGroup; }
		
		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }
		
		//({OrExpr.left=current} 'o quizás' right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpr.left=current}
		public Action getOrExprLeftAction_1_0() { return cOrExprLeftAction_1_0; }
		
		//'o quizás'
		public Keyword getOQuizSKeyword_1_1() { return cOQuizSKeyword_1_1; }
		
		//right=AndExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_2_0() { return cRightAndExprParserRuleCall_1_2_0; }
	}
	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cYTambiNKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpr returns Expression:
		//    EqualityExpr ({AndExpr.left=current} 'y también' right=EqualityExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpr ({AndExpr.left=current} 'y también' right=EqualityExpr)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpr
		public RuleCall getEqualityExprParserRuleCall_0() { return cEqualityExprParserRuleCall_0; }
		
		//({AndExpr.left=current} 'y también' right=EqualityExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpr.left=current}
		public Action getAndExprLeftAction_1_0() { return cAndExprLeftAction_1_0; }
		
		//'y también'
		public Keyword getYTambiNKeyword_1_1() { return cYTambiNKeyword_1_1; }
		
		//right=EqualityExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpr
		public RuleCall getRightEqualityExprParserRuleCall_1_2_0() { return cRightEqualityExprParserRuleCall_1_2_0; }
	}
	public class EqualityExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.EqualityExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cLateAlUnSonoConKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cCantaConUnMatizDistintoAKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpr returns Expression:
		//    RelationalExpr ({EqualityExpr.left=current} ('late al unísono con' | 'canta con un matiz distinto a') right=RelationalExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpr ({EqualityExpr.left=current} ('late al unísono con' | 'canta con un matiz distinto a') right=RelationalExpr)*
		public Group getGroup() { return cGroup; }
		
		//RelationalExpr
		public RuleCall getRelationalExprParserRuleCall_0() { return cRelationalExprParserRuleCall_0; }
		
		//({EqualityExpr.left=current} ('late al unísono con' | 'canta con un matiz distinto a') right=RelationalExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqualityExpr.left=current}
		public Action getEqualityExprLeftAction_1_0() { return cEqualityExprLeftAction_1_0; }
		
		//('late al unísono con' | 'canta con un matiz distinto a')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'late al unísono con'
		public Keyword getLateAlUnSonoConKeyword_1_1_0() { return cLateAlUnSonoConKeyword_1_1_0; }
		
		//'canta con un matiz distinto a'
		public Keyword getCantaConUnMatizDistintoAKeyword_1_1_1() { return cCantaConUnMatizDistintoAKeyword_1_1_1; }
		
		//right=RelationalExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RelationalExpr
		public RuleCall getRightRelationalExprParserRuleCall_1_2_0() { return cRightRelationalExprParserRuleCall_1_2_0; }
	}
	public class RelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.RelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cSusurraConMenosFuerzaQueKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cArdeConMasPasionQueKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelationalExpr returns Expression:
		//    AdditiveExpr ({RelationalExpr.left=current} ('susurra con menos fuerza que ' | 'arde con mas pasion que') right=AdditiveExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpr ({RelationalExpr.left=current} ('susurra con menos fuerza que ' | 'arde con mas pasion que') right=AdditiveExpr)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpr
		public RuleCall getAdditiveExprParserRuleCall_0() { return cAdditiveExprParserRuleCall_0; }
		
		//({RelationalExpr.left=current} ('susurra con menos fuerza que ' | 'arde con mas pasion que') right=AdditiveExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelationalExpr.left=current}
		public Action getRelationalExprLeftAction_1_0() { return cRelationalExprLeftAction_1_0; }
		
		//('susurra con menos fuerza que ' | 'arde con mas pasion que')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'susurra con menos fuerza que '
		public Keyword getSusurraConMenosFuerzaQueKeyword_1_1_0() { return cSusurraConMenosFuerzaQueKeyword_1_1_0; }
		
		//'arde con mas pasion que'
		public Keyword getArdeConMasPasionQueKeyword_1_1_1() { return cArdeConMasPasionQueKeyword_1_1_1; }
		
		//right=AdditiveExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AdditiveExpr
		public RuleCall getRightAdditiveExprParserRuleCall_1_2_0() { return cRightAdditiveExprParserRuleCall_1_2_0; }
	}
	public class AdditiveExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.AdditiveExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditiveExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cUnidosEnUnSoloSuspiroConKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cFundidosEnLaLlamaDeKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpr returns Expression:
		//    MultiplicativeExpr ({AdditiveExpr.left=current} ('unidos en un solo suspiro con'  | 'fundidos en la llama de') right=MultiplicativeExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpr ({AdditiveExpr.left=current} ('unidos en un solo suspiro con'  | 'fundidos en la llama de') right=MultiplicativeExpr)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpr
		public RuleCall getMultiplicativeExprParserRuleCall_0() { return cMultiplicativeExprParserRuleCall_0; }
		
		//({AdditiveExpr.left=current} ('unidos en un solo suspiro con'  | 'fundidos en la llama de') right=MultiplicativeExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AdditiveExpr.left=current}
		public Action getAdditiveExprLeftAction_1_0() { return cAdditiveExprLeftAction_1_0; }
		
		//('unidos en un solo suspiro con'  | 'fundidos en la llama de')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'unidos en un solo suspiro con'
		public Keyword getUnidosEnUnSoloSuspiroConKeyword_1_1_0() { return cUnidosEnUnSoloSuspiroConKeyword_1_1_0; }
		
		//'fundidos en la llama de'
		public Keyword getFundidosEnLaLlamaDeKeyword_1_1_1() { return cFundidosEnLaLlamaDeKeyword_1_1_1; }
		
		//right=MultiplicativeExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplicativeExpr
		public RuleCall getRightMultiplicativeExprParserRuleCall_1_2_0() { return cRightMultiplicativeExprParserRuleCall_1_2_0; }
	}
	public class MultiplicativeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.MultiplicativeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicativeExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cFortalecidosPorElFuegoDeKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSeparadosEntreLosEcosDeKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpr returns Expression:
		//    UnaryExpr ({MultiplicativeExpr.left=current} ('fortalecidos por el fuego de' | 'Separados entre los ecos de') right=UnaryExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpr ({MultiplicativeExpr.left=current} ('fortalecidos por el fuego de' | 'Separados entre los ecos de') right=UnaryExpr)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }
		
		//({MultiplicativeExpr.left=current} ('fortalecidos por el fuego de' | 'Separados entre los ecos de') right=UnaryExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplicativeExpr.left=current}
		public Action getMultiplicativeExprLeftAction_1_0() { return cMultiplicativeExprLeftAction_1_0; }
		
		//('fortalecidos por el fuego de' | 'Separados entre los ecos de')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'fortalecidos por el fuego de'
		public Keyword getFortalecidosPorElFuegoDeKeyword_1_1_0() { return cFortalecidosPorElFuegoDeKeyword_1_1_0; }
		
		//'Separados entre los ecos de'
		public Keyword getSeparadosEntreLosEcosDeKeyword_1_1_1() { return cSeparadosEntreLosEcosDeKeyword_1_1_1; }
		
		//right=UnaryExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnaryExpr
		public RuleCall getRightUnaryExprParserRuleCall_1_2_0() { return cRightUnaryExprParserRuleCall_1_2_0; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.UnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNoLoCreoKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprPrimaryExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpr returns Expression:
		//    {NotExpr} 'no lo creo' expr=PrimaryExpr
		//  | PrimaryExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//  {NotExpr} 'no lo creo' expr=PrimaryExpr
		//| PrimaryExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NotExpr} 'no lo creo' expr=PrimaryExpr
		public Group getGroup_0() { return cGroup_0; }
		
		//{NotExpr}
		public Action getNotExprAction_0_0() { return cNotExprAction_0_0; }
		
		//'no lo creo'
		public Keyword getNoLoCreoKeyword_0_1() { return cNoLoCreoKeyword_0_1; }
		
		//expr=PrimaryExpr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }
		
		//PrimaryExpr
		public RuleCall getExprPrimaryExprParserRuleCall_0_2_0() { return cExprPrimaryExprParserRuleCall_0_2_0; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_1() { return cPrimaryExprParserRuleCall_1; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSpecialBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PrimaryExpr returns Expression:
		//    Literal| VariableRef | SpecialBoolean | '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//Literal| VariableRef | SpecialBoolean | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//VariableRef
		public RuleCall getVariableRefParserRuleCall_1() { return cVariableRefParserRuleCall_1; }
		
		//SpecialBoolean
		public RuleCall getSpecialBooleanParserRuleCall_2() { return cSpecialBooleanParserRuleCall_2; }
		
		//'(' Expression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal returns Expression:
		//    IntLiteral | StringLiteral | BooleanLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral | StringLiteral | BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_2() { return cBooleanLiteralParserRuleCall_2; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.IntLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntLiteral:
		//    {IntLiteral} value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntLiteral} value=INT
		public Group getGroup() { return cGroup; }
		
		//{IntLiteral}
		public Action getIntLiteralAction_0() { return cIntLiteralAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral:
		//    {StringLiteral} value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueSiempreKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueJamSKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		
		//BooleanLiteral:
		//    {BooleanLiteral} value=('siempre' | 'jamás')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanLiteral} value=('siempre' | 'jamás')
		public Group getGroup() { return cGroup; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }
		
		//value=('siempre' | 'jamás')
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//('siempre' | 'jamás')
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }
		
		//'siempre'
		public Keyword getValueSiempreKeyword_1_0_0() { return cValueSiempreKeyword_1_0_0; }
		
		//'jamás'
		public Keyword getValueJamSKeyword_1_0_1() { return cValueJamSKeyword_1_0_1; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.VariableRef");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableRef:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SpecialBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.SpecialBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cANMePiensasKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTuVozMeAlcanzaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SpecialBoolean returns Expression:
		//    'aún me piensas' | 'tu voz me alcanza';
		@Override public ParserRule getRule() { return rule; }
		
		//'aún me piensas' | 'tu voz me alcanza'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'aún me piensas'
		public Keyword getANMePiensasKeyword_0() { return cANMePiensasKeyword_0; }
		
		//'tu voz me alcanza'
		public Keyword getTuVozMeAlcanzaKeyword_1() { return cTuVozMeAlcanzaKeyword_1; }
	}
	public class CondicionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.Condicional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSiEnTuCorazonSientesQueKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSiEnTuAlmaNaceElDeseoDeQueKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCondicionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondicionCondicionParserRuleCall_1_0 = (RuleCall)cCondicionAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAccionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAccionInstruccionParserRuleCall_3_0 = (RuleCall)cAccionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cYSiElDestinoDijeraLoContrarioKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAccionElseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAccionElseInstruccionParserRuleCall_4_1_0 = (RuleCall)cAccionElseAssignment_4_1.eContents().get(0);
		
		//Condicional:
		//    ('Si en tu corazon sientes que'| 'Si en tu alma nace el deseo de que'  ) condicion=Condicion ',' accion=Instruccion
		//    ('Y si el destino dijera lo contrario,' accionElse=Instruccion)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('Si en tu corazon sientes que'| 'Si en tu alma nace el deseo de que'  ) condicion=Condicion ',' accion=Instruccion
		//('Y si el destino dijera lo contrario,' accionElse=Instruccion)?
		public Group getGroup() { return cGroup; }
		
		//('Si en tu corazon sientes que'| 'Si en tu alma nace el deseo de que'  )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Si en tu corazon sientes que'
		public Keyword getSiEnTuCorazonSientesQueKeyword_0_0() { return cSiEnTuCorazonSientesQueKeyword_0_0; }
		
		//'Si en tu alma nace el deseo de que'
		public Keyword getSiEnTuAlmaNaceElDeseoDeQueKeyword_0_1() { return cSiEnTuAlmaNaceElDeseoDeQueKeyword_0_1; }
		
		//condicion=Condicion
		public Assignment getCondicionAssignment_1() { return cCondicionAssignment_1; }
		
		//Condicion
		public RuleCall getCondicionCondicionParserRuleCall_1_0() { return cCondicionCondicionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//accion=Instruccion
		public Assignment getAccionAssignment_3() { return cAccionAssignment_3; }
		
		//Instruccion
		public RuleCall getAccionInstruccionParserRuleCall_3_0() { return cAccionInstruccionParserRuleCall_3_0; }
		
		//('Y si el destino dijera lo contrario,' accionElse=Instruccion)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Y si el destino dijera lo contrario,'
		public Keyword getYSiElDestinoDijeraLoContrarioKeyword_4_0() { return cYSiElDestinoDijeraLoContrarioKeyword_4_0; }
		
		//accionElse=Instruccion
		public Assignment getAccionElseAssignment_4_1() { return cAccionElseAssignment_4_1; }
		
		//Instruccion
		public RuleCall getAccionElseInstruccionParserRuleCall_4_1_0() { return cAccionElseInstruccionParserRuleCall_4_1_0; }
	}
	public class BucleWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.BucleWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMientrasAunMePiensesKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMientrasANSueEsConEsteMomentoHazQueOcurraKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCondicionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondicionCondicionParserRuleCall_1_0 = (RuleCall)cCondicionAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAccionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAccionInstruccionParserRuleCall_3_0 = (RuleCall)cAccionAssignment_3.eContents().get(0);
		
		//BucleWhile:
		//    ( 'Mientras aun me pienses'| 'Mientras aún sueñes con este momento, haz que ocurra' )
		//    condicion=Condicion ',' accion=Instruccion;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'Mientras aun me pienses'| 'Mientras aún sueñes con este momento, haz que ocurra' )
		//condicion=Condicion ',' accion=Instruccion
		public Group getGroup() { return cGroup; }
		
		//( 'Mientras aun me pienses'| 'Mientras aún sueñes con este momento, haz que ocurra' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Mientras aun me pienses'
		public Keyword getMientrasAunMePiensesKeyword_0_0() { return cMientrasAunMePiensesKeyword_0_0; }
		
		//'Mientras aún sueñes con este momento, haz que ocurra'
		public Keyword getMientrasANSueEsConEsteMomentoHazQueOcurraKeyword_0_1() { return cMientrasANSueEsConEsteMomentoHazQueOcurraKeyword_0_1; }
		
		//condicion=Condicion
		public Assignment getCondicionAssignment_1() { return cCondicionAssignment_1; }
		
		//Condicion
		public RuleCall getCondicionCondicionParserRuleCall_1_0() { return cCondicionCondicionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//accion=Instruccion
		public Assignment getAccionAssignment_3() { return cAccionAssignment_3; }
		
		//Instruccion
		public RuleCall getAccionInstruccionParserRuleCall_3_0() { return cAccionInstruccionParserRuleCall_3_0; }
	}
	public class BucleForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.DearCode.BucleFor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCadaDiaDesdeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPorCadaSuspiroDesdeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCondicionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondicionCondicionParserRuleCall_1_0 = (RuleCall)cCondicionAssignment_1.eContents().get(0);
		private final Keyword cHastaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAccionStopAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAccionStopInstruccionParserRuleCall_3_0 = (RuleCall)cAccionStopAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAccionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAccionInstruccionParserRuleCall_5_0 = (RuleCall)cAccionAssignment_5.eContents().get(0);
		
		//BucleFor:
		//    ( 'Cada dia, desde'| 'Por cada suspiro desde' )
		//    condicion=Condicion 'hasta' accionStop=Instruccion ',' accion=Instruccion;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'Cada dia, desde'| 'Por cada suspiro desde' )
		//condicion=Condicion 'hasta' accionStop=Instruccion ',' accion=Instruccion
		public Group getGroup() { return cGroup; }
		
		//( 'Cada dia, desde'| 'Por cada suspiro desde' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Cada dia, desde'
		public Keyword getCadaDiaDesdeKeyword_0_0() { return cCadaDiaDesdeKeyword_0_0; }
		
		//'Por cada suspiro desde'
		public Keyword getPorCadaSuspiroDesdeKeyword_0_1() { return cPorCadaSuspiroDesdeKeyword_0_1; }
		
		//condicion=Condicion
		public Assignment getCondicionAssignment_1() { return cCondicionAssignment_1; }
		
		//Condicion
		public RuleCall getCondicionCondicionParserRuleCall_1_0() { return cCondicionCondicionParserRuleCall_1_0; }
		
		//'hasta'
		public Keyword getHastaKeyword_2() { return cHastaKeyword_2; }
		
		//accionStop=Instruccion
		public Assignment getAccionStopAssignment_3() { return cAccionStopAssignment_3; }
		
		//Instruccion
		public RuleCall getAccionStopInstruccionParserRuleCall_3_0() { return cAccionStopInstruccionParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//accion=Instruccion
		public Assignment getAccionAssignment_5() { return cAccionAssignment_5; }
		
		//Instruccion
		public RuleCall getAccionInstruccionParserRuleCall_5_0() { return cAccionInstruccionParserRuleCall_5_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final CartaElements pCarta;
	private final SaludoElements pSaludo;
	private final DespedidaElements pDespedida;
	private final CuerpoElements pCuerpo;
	private final InstruccionElements pInstruccion;
	private final CondicionElements pCondicion;
	private final ExpressionElements pExpression;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final EqualityExprElements pEqualityExpr;
	private final RelationalExprElements pRelationalExpr;
	private final AdditiveExprElements pAdditiveExpr;
	private final MultiplicativeExprElements pMultiplicativeExpr;
	private final UnaryExprElements pUnaryExpr;
	private final PrimaryExprElements pPrimaryExpr;
	private final LiteralElements pLiteral;
	private final IntLiteralElements pIntLiteral;
	private final StringLiteralElements pStringLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final VariableRefElements pVariableRef;
	private final SpecialBooleanElements pSpecialBoolean;
	private final CondicionalElements pCondicional;
	private final BucleWhileElements pBucleWhile;
	private final BucleForElements pBucleFor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DearCodeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pCarta = new CartaElements();
		this.pSaludo = new SaludoElements();
		this.pDespedida = new DespedidaElements();
		this.pCuerpo = new CuerpoElements();
		this.pInstruccion = new InstruccionElements();
		this.pCondicion = new CondicionElements();
		this.pExpression = new ExpressionElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pEqualityExpr = new EqualityExprElements();
		this.pRelationalExpr = new RelationalExprElements();
		this.pAdditiveExpr = new AdditiveExprElements();
		this.pMultiplicativeExpr = new MultiplicativeExprElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pLiteral = new LiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pVariableRef = new VariableRefElements();
		this.pSpecialBoolean = new SpecialBooleanElements();
		this.pCondicional = new CondicionalElements();
		this.pBucleWhile = new BucleWhileElements();
		this.pBucleFor = new BucleForElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.DearCode".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//    name=ID ':' cartas+=Carta+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Carta:
	//    saludo=Saludo cuerpo=Cuerpo despedida=Despedida;
	public CartaElements getCartaAccess() {
		return pCarta;
	}
	
	public ParserRule getCartaRule() {
		return getCartaAccess().getRule();
	}
	
	//Saludo:
	//    'Querido compilador:' name=ID;
	public SaludoElements getSaludoAccess() {
		return pSaludo;
	}
	
	public ParserRule getSaludoRule() {
		return getSaludoAccess().getRule();
	}
	
	//Despedida:
	//    'Con cariño,' 'Tu programador' name=ID '.';
	public DespedidaElements getDespedidaAccess() {
		return pDespedida;
	}
	
	public ParserRule getDespedidaRule() {
		return getDespedidaAccess().getRule();
	}
	
	//Cuerpo:
	//    instrucciones+=Instruccion*;
	public CuerpoElements getCuerpoAccess() {
		return pCuerpo;
	}
	
	public ParserRule getCuerpoRule() {
		return getCuerpoAccess().getRule();
	}
	
	//Instruccion:
	//    Condicional | BucleWhile | BucleFor;
	public InstruccionElements getInstruccionAccess() {
		return pInstruccion;
	}
	
	public ParserRule getInstruccionRule() {
		return getInstruccionAccess().getRule();
	}
	
	//Condicion:
	//    Expression
	//;
	public CondicionElements getCondicionAccess() {
		return pCondicion;
	}
	
	public ParserRule getCondicionRule() {
		return getCondicionAccess().getRule();
	}
	
	//Expression:
	//    OrExpr;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//OrExpr returns Expression:
	//    AndExpr ({OrExpr.left=current} 'o quizás' right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}
	
	//AndExpr returns Expression:
	//    EqualityExpr ({AndExpr.left=current} 'y también' right=EqualityExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}
	
	//EqualityExpr returns Expression:
	//    RelationalExpr ({EqualityExpr.left=current} ('late al unísono con' | 'canta con un matiz distinto a') right=RelationalExpr)*;
	public EqualityExprElements getEqualityExprAccess() {
		return pEqualityExpr;
	}
	
	public ParserRule getEqualityExprRule() {
		return getEqualityExprAccess().getRule();
	}
	
	//RelationalExpr returns Expression:
	//    AdditiveExpr ({RelationalExpr.left=current} ('susurra con menos fuerza que ' | 'arde con mas pasion que') right=AdditiveExpr)*;
	public RelationalExprElements getRelationalExprAccess() {
		return pRelationalExpr;
	}
	
	public ParserRule getRelationalExprRule() {
		return getRelationalExprAccess().getRule();
	}
	
	//AdditiveExpr returns Expression:
	//    MultiplicativeExpr ({AdditiveExpr.left=current} ('unidos en un solo suspiro con'  | 'fundidos en la llama de') right=MultiplicativeExpr)*;
	public AdditiveExprElements getAdditiveExprAccess() {
		return pAdditiveExpr;
	}
	
	public ParserRule getAdditiveExprRule() {
		return getAdditiveExprAccess().getRule();
	}
	
	//MultiplicativeExpr returns Expression:
	//    UnaryExpr ({MultiplicativeExpr.left=current} ('fortalecidos por el fuego de' | 'Separados entre los ecos de') right=UnaryExpr)*;
	public MultiplicativeExprElements getMultiplicativeExprAccess() {
		return pMultiplicativeExpr;
	}
	
	public ParserRule getMultiplicativeExprRule() {
		return getMultiplicativeExprAccess().getRule();
	}
	
	//UnaryExpr returns Expression:
	//    {NotExpr} 'no lo creo' expr=PrimaryExpr
	//  | PrimaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//PrimaryExpr returns Expression:
	//    Literal| VariableRef | SpecialBoolean | '(' Expression ')';
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//Literal returns Expression:
	//    IntLiteral | StringLiteral | BooleanLiteral
	//;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//    {IntLiteral} value=INT
	//;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    {StringLiteral} value=STRING
	//;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//    {BooleanLiteral} value=('siempre' | 'jamás')
	//;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//VariableRef:
	//    name=ID;
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//SpecialBoolean returns Expression:
	//    'aún me piensas' | 'tu voz me alcanza';
	public SpecialBooleanElements getSpecialBooleanAccess() {
		return pSpecialBoolean;
	}
	
	public ParserRule getSpecialBooleanRule() {
		return getSpecialBooleanAccess().getRule();
	}
	
	//Condicional:
	//    ('Si en tu corazon sientes que'| 'Si en tu alma nace el deseo de que'  ) condicion=Condicion ',' accion=Instruccion
	//    ('Y si el destino dijera lo contrario,' accionElse=Instruccion)?;
	public CondicionalElements getCondicionalAccess() {
		return pCondicional;
	}
	
	public ParserRule getCondicionalRule() {
		return getCondicionalAccess().getRule();
	}
	
	//BucleWhile:
	//    ( 'Mientras aun me pienses'| 'Mientras aún sueñes con este momento, haz que ocurra' )
	//    condicion=Condicion ',' accion=Instruccion;
	public BucleWhileElements getBucleWhileAccess() {
		return pBucleWhile;
	}
	
	public ParserRule getBucleWhileRule() {
		return getBucleWhileAccess().getRule();
	}
	
	//BucleFor:
	//    ( 'Cada dia, desde'| 'Por cada suspiro desde' )
	//    condicion=Condicion 'hasta' accionStop=Instruccion ',' accion=Instruccion;
	public BucleForElements getBucleForAccess() {
		return pBucleFor;
	}
	
	public ParserRule getBucleForRule() {
		return getBucleForAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
