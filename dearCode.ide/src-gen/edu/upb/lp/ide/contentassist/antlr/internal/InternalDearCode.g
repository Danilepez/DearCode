/*
 * generated by Xtext 2.39.0
 */
grammar InternalDearCode;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package edu.upb.lp.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.upb.lp.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import edu.upb.lp.services.DearCodeGrammarAccess;

}
@parser::members {
	private DearCodeGrammarAccess grammarAccess;

	public void setGrammarAccess(DearCodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCarta
entryRuleCarta
:
{ before(grammarAccess.getCartaRule()); }
	 ruleCarta
{ after(grammarAccess.getCartaRule()); } 
	 EOF 
;

// Rule Carta
ruleCarta 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCartaAccess().getGroup()); }
		(rule__Carta__Group__0)
		{ after(grammarAccess.getCartaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSaludo
entryRuleSaludo
:
{ before(grammarAccess.getSaludoRule()); }
	 ruleSaludo
{ after(grammarAccess.getSaludoRule()); } 
	 EOF 
;

// Rule Saludo
ruleSaludo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSaludoAccess().getGroup()); }
		(rule__Saludo__Group__0)
		{ after(grammarAccess.getSaludoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDespedida
entryRuleDespedida
:
{ before(grammarAccess.getDespedidaRule()); }
	 ruleDespedida
{ after(grammarAccess.getDespedidaRule()); } 
	 EOF 
;

// Rule Despedida
ruleDespedida 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDespedidaAccess().getGroup()); }
		(rule__Despedida__Group__0)
		{ after(grammarAccess.getDespedidaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCuerpo
entryRuleCuerpo
:
{ before(grammarAccess.getCuerpoRule()); }
	 ruleCuerpo
{ after(grammarAccess.getCuerpoRule()); } 
	 EOF 
;

// Rule Cuerpo
ruleCuerpo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCuerpoAccess().getInstruccionesAssignment()); }
		(rule__Cuerpo__InstruccionesAssignment)*
		{ after(grammarAccess.getCuerpoAccess().getInstruccionesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruccion
entryRuleInstruccion
:
{ before(grammarAccess.getInstruccionRule()); }
	 ruleInstruccion
{ after(grammarAccess.getInstruccionRule()); } 
	 EOF 
;

// Rule Instruccion
ruleInstruccion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstruccionAccess().getAlternatives()); }
		(rule__Instruccion__Alternatives)
		{ after(grammarAccess.getInstruccionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondicion
entryRuleCondicion
:
{ before(grammarAccess.getCondicionRule()); }
	 ruleCondicion
{ after(grammarAccess.getCondicionRule()); } 
	 EOF 
;

// Rule Condicion
ruleCondicion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCondicionAccess().getExpressionParserRuleCall()); }
		ruleExpression
		{ after(grammarAccess.getCondicionAccess().getExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrExprParserRuleCall()); }
		ruleOrExpr
		{ after(grammarAccess.getExpressionAccess().getOrExprParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpr
entryRuleOrExpr
:
{ before(grammarAccess.getOrExprRule()); }
	 ruleOrExpr
{ after(grammarAccess.getOrExprRule()); } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExprAccess().getGroup()); }
		(rule__OrExpr__Group__0)
		{ after(grammarAccess.getOrExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpr
entryRuleAndExpr
:
{ before(grammarAccess.getAndExprRule()); }
	 ruleAndExpr
{ after(grammarAccess.getAndExprRule()); } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExprAccess().getGroup()); }
		(rule__AndExpr__Group__0)
		{ after(grammarAccess.getAndExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualityExpr
entryRuleEqualityExpr
:
{ before(grammarAccess.getEqualityExprRule()); }
	 ruleEqualityExpr
{ after(grammarAccess.getEqualityExprRule()); } 
	 EOF 
;

// Rule EqualityExpr
ruleEqualityExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityExprAccess().getGroup()); }
		(rule__EqualityExpr__Group__0)
		{ after(grammarAccess.getEqualityExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalExpr
entryRuleRelationalExpr
:
{ before(grammarAccess.getRelationalExprRule()); }
	 ruleRelationalExpr
{ after(grammarAccess.getRelationalExprRule()); } 
	 EOF 
;

// Rule RelationalExpr
ruleRelationalExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalExprAccess().getGroup()); }
		(rule__RelationalExpr__Group__0)
		{ after(grammarAccess.getRelationalExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditiveExpr
entryRuleAdditiveExpr
:
{ before(grammarAccess.getAdditiveExprRule()); }
	 ruleAdditiveExpr
{ after(grammarAccess.getAdditiveExprRule()); } 
	 EOF 
;

// Rule AdditiveExpr
ruleAdditiveExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveExprAccess().getGroup()); }
		(rule__AdditiveExpr__Group__0)
		{ after(grammarAccess.getAdditiveExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpr
entryRuleMultiplicativeExpr
:
{ before(grammarAccess.getMultiplicativeExprRule()); }
	 ruleMultiplicativeExpr
{ after(grammarAccess.getMultiplicativeExprRule()); } 
	 EOF 
;

// Rule MultiplicativeExpr
ruleMultiplicativeExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExprAccess().getGroup()); }
		(rule__MultiplicativeExpr__Group__0)
		{ after(grammarAccess.getMultiplicativeExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr
:
{ before(grammarAccess.getUnaryExprRule()); }
	 ruleUnaryExpr
{ after(grammarAccess.getUnaryExprRule()); } 
	 EOF 
;

// Rule UnaryExpr
ruleUnaryExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExprAccess().getAlternatives()); }
		(rule__UnaryExpr__Alternatives)
		{ after(grammarAccess.getUnaryExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr
:
{ before(grammarAccess.getPrimaryExprRule()); }
	 rulePrimaryExpr
{ after(grammarAccess.getPrimaryExprRule()); } 
	 EOF 
;

// Rule PrimaryExpr
rulePrimaryExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
		(rule__PrimaryExpr__Alternatives)
		{ after(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getGroup()); }
		(rule__IntLiteral__Group__0)
		{ after(grammarAccess.getIntLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getGroup()); }
		(rule__StringLiteral__Group__0)
		{ after(grammarAccess.getStringLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getGroup()); }
		(rule__BooleanLiteral__Group__0)
		{ after(grammarAccess.getBooleanLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableRef
entryRuleVariableRef
:
{ before(grammarAccess.getVariableRefRule()); }
	 ruleVariableRef
{ after(grammarAccess.getVariableRefRule()); } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableRefAccess().getNameAssignment()); }
		(rule__VariableRef__NameAssignment)
		{ after(grammarAccess.getVariableRefAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpecialBoolean
entryRuleSpecialBoolean
:
{ before(grammarAccess.getSpecialBooleanRule()); }
	 ruleSpecialBoolean
{ after(grammarAccess.getSpecialBooleanRule()); } 
	 EOF 
;

// Rule SpecialBoolean
ruleSpecialBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpecialBooleanAccess().getAlternatives()); }
		(rule__SpecialBoolean__Alternatives)
		{ after(grammarAccess.getSpecialBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondicional
entryRuleCondicional
:
{ before(grammarAccess.getCondicionalRule()); }
	 ruleCondicional
{ after(grammarAccess.getCondicionalRule()); } 
	 EOF 
;

// Rule Condicional
ruleCondicional 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCondicionalAccess().getGroup()); }
		(rule__Condicional__Group__0)
		{ after(grammarAccess.getCondicionalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBucleWhile
entryRuleBucleWhile
:
{ before(grammarAccess.getBucleWhileRule()); }
	 ruleBucleWhile
{ after(grammarAccess.getBucleWhileRule()); } 
	 EOF 
;

// Rule BucleWhile
ruleBucleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBucleWhileAccess().getGroup()); }
		(rule__BucleWhile__Group__0)
		{ after(grammarAccess.getBucleWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBucleFor
entryRuleBucleFor
:
{ before(grammarAccess.getBucleForRule()); }
	 ruleBucleFor
{ after(grammarAccess.getBucleForRule()); } 
	 EOF 
;

// Rule BucleFor
ruleBucleFor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBucleForAccess().getGroup()); }
		(rule__BucleFor__Group__0)
		{ after(grammarAccess.getBucleForAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruccion__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstruccionAccess().getCondicionalParserRuleCall_0()); }
		ruleCondicional
		{ after(grammarAccess.getInstruccionAccess().getCondicionalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstruccionAccess().getBucleWhileParserRuleCall_1()); }
		ruleBucleWhile
		{ after(grammarAccess.getInstruccionAccess().getBucleWhileParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstruccionAccess().getBucleForParserRuleCall_2()); }
		ruleBucleFor
		{ after(grammarAccess.getInstruccionAccess().getBucleForParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpr__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExprAccess().getLateAlUnSonoConKeyword_1_1_0()); }
		'late al un\u00EDsono con'
		{ after(grammarAccess.getEqualityExprAccess().getLateAlUnSonoConKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityExprAccess().getCantaConUnMatizDistintoAKeyword_1_1_1()); }
		'canta con un matiz distinto a'
		{ after(grammarAccess.getEqualityExprAccess().getCantaConUnMatizDistintoAKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExprAccess().getSusurraConMenosFuerzaQueKeyword_1_1_0()); }
		'susurra con menos fuerza que '
		{ after(grammarAccess.getRelationalExprAccess().getSusurraConMenosFuerzaQueKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalExprAccess().getArdeConMasPasionQueKeyword_1_1_1()); }
		'arde con mas pasion que'
		{ after(grammarAccess.getRelationalExprAccess().getArdeConMasPasionQueKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExprAccess().getUnidosEnUnSoloSuspiroConKeyword_1_1_0()); }
		'unidos en un solo suspiro con'
		{ after(grammarAccess.getAdditiveExprAccess().getUnidosEnUnSoloSuspiroConKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditiveExprAccess().getFundidosEnLaLlamaDeKeyword_1_1_1()); }
		'fundidos en la llama de'
		{ after(grammarAccess.getAdditiveExprAccess().getFundidosEnLaLlamaDeKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExprAccess().getFortalecidosPorElFuegoDeKeyword_1_1_0()); }
		'fortalecidos por el fuego de'
		{ after(grammarAccess.getMultiplicativeExprAccess().getFortalecidosPorElFuegoDeKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeExprAccess().getSeparadosEntreLosEcosDeKeyword_1_1_1()); }
		'Separados entre los ecos de'
		{ after(grammarAccess.getMultiplicativeExprAccess().getSeparadosEntreLosEcosDeKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExprAccess().getGroup_0()); }
		(rule__UnaryExpr__Group_0__0)
		{ after(grammarAccess.getUnaryExprAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExprAccess().getPrimaryExprParserRuleCall_1()); }
		rulePrimaryExpr
		{ after(grammarAccess.getUnaryExprAccess().getPrimaryExprParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExprAccess().getLiteralParserRuleCall_0()); }
		ruleLiteral
		{ after(grammarAccess.getPrimaryExprAccess().getLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprAccess().getVariableRefParserRuleCall_1()); }
		ruleVariableRef
		{ after(grammarAccess.getPrimaryExprAccess().getVariableRefParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprAccess().getSpecialBooleanParserRuleCall_2()); }
		ruleSpecialBoolean
		{ after(grammarAccess.getPrimaryExprAccess().getSpecialBooleanParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprAccess().getGroup_3()); }
		(rule__PrimaryExpr__Group_3__0)
		{ after(grammarAccess.getPrimaryExprAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_0()); }
		ruleIntLiteral
		{ after(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
		ruleStringLiteral
		{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueSiempreKeyword_1_0_0()); }
		'siempre'
		{ after(grammarAccess.getBooleanLiteralAccess().getValueSiempreKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueJamSKeyword_1_0_1()); }
		'jam\u00E1s'
		{ after(grammarAccess.getBooleanLiteralAccess().getValueJamSKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialBoolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecialBooleanAccess().getANMePiensasKeyword_0()); }
		'a\u00FAn me piensas'
		{ after(grammarAccess.getSpecialBooleanAccess().getANMePiensasKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialBooleanAccess().getTuVozMeAlcanzaKeyword_1()); }
		'tu voz me alcanza'
		{ after(grammarAccess.getSpecialBooleanAccess().getTuVozMeAlcanzaKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondicionalAccess().getSiEnTuCorazonSientesQueKeyword_0_0()); }
		'Si en tu corazon sientes que'
		{ after(grammarAccess.getCondicionalAccess().getSiEnTuCorazonSientesQueKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCondicionalAccess().getSiEnTuAlmaNaceElDeseoDeQueKeyword_0_1()); }
		'Si en tu alma nace el deseo de que'
		{ after(grammarAccess.getCondicionalAccess().getSiEnTuAlmaNaceElDeseoDeQueKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleWhile__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBucleWhileAccess().getMientrasAunMePiensesKeyword_0_0()); }
		'Mientras aun me pienses'
		{ after(grammarAccess.getBucleWhileAccess().getMientrasAunMePiensesKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBucleWhileAccess().getMientrasANSueEsConEsteMomentoHazQueOcurraKeyword_0_1()); }
		'Mientras a\u00FAn sue\u00F1es con este momento, haz que ocurra'
		{ after(grammarAccess.getBucleWhileAccess().getMientrasANSueEsConEsteMomentoHazQueOcurraKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBucleForAccess().getCadaDiaDesdeKeyword_0_0()); }
		'Cada dia, desde'
		{ after(grammarAccess.getBucleForAccess().getCadaDiaDesdeKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBucleForAccess().getPorCadaSuspiroDesdeKeyword_0_1()); }
		'Por cada suspiro desde'
		{ after(grammarAccess.getBucleForAccess().getPorCadaSuspiroDesdeKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getNameAssignment_0()); }
	(rule__Program__NameAssignment_0)
	{ after(grammarAccess.getProgramAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getProgramAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getProgramAccess().getCartasAssignment_2()); }
		(rule__Program__CartasAssignment_2)
		{ after(grammarAccess.getProgramAccess().getCartasAssignment_2()); }
	)
	(
		{ before(grammarAccess.getProgramAccess().getCartasAssignment_2()); }
		(rule__Program__CartasAssignment_2)*
		{ after(grammarAccess.getProgramAccess().getCartasAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Carta__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Carta__Group__0__Impl
	rule__Carta__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Carta__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCartaAccess().getSaludoAssignment_0()); }
	(rule__Carta__SaludoAssignment_0)
	{ after(grammarAccess.getCartaAccess().getSaludoAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Carta__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Carta__Group__1__Impl
	rule__Carta__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Carta__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCartaAccess().getCuerpoAssignment_1()); }
	(rule__Carta__CuerpoAssignment_1)
	{ after(grammarAccess.getCartaAccess().getCuerpoAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Carta__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Carta__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Carta__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCartaAccess().getDespedidaAssignment_2()); }
	(rule__Carta__DespedidaAssignment_2)
	{ after(grammarAccess.getCartaAccess().getDespedidaAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Saludo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Saludo__Group__0__Impl
	rule__Saludo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Saludo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaludoAccess().getQueridoCompiladorKeyword_0()); }
	'Querido compilador:'
	{ after(grammarAccess.getSaludoAccess().getQueridoCompiladorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Saludo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Saludo__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Saludo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaludoAccess().getNameAssignment_1()); }
	(rule__Saludo__NameAssignment_1)
	{ after(grammarAccess.getSaludoAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Despedida__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Despedida__Group__0__Impl
	rule__Despedida__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Despedida__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDespedidaAccess().getConCariOKeyword_0()); }
	'Con cari\u00F1o,'
	{ after(grammarAccess.getDespedidaAccess().getConCariOKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Despedida__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Despedida__Group__1__Impl
	rule__Despedida__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Despedida__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDespedidaAccess().getTuProgramadorKeyword_1()); }
	'Tu programador'
	{ after(grammarAccess.getDespedidaAccess().getTuProgramadorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Despedida__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Despedida__Group__2__Impl
	rule__Despedida__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Despedida__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDespedidaAccess().getNameAssignment_2()); }
	(rule__Despedida__NameAssignment_2)
	{ after(grammarAccess.getDespedidaAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Despedida__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Despedida__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Despedida__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDespedidaAccess().getFullStopKeyword_3()); }
	'.'
	{ after(grammarAccess.getDespedidaAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpr__Group__0__Impl
	rule__OrExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); }
	ruleAndExpr
	{ after(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExprAccess().getGroup_1()); }
	(rule__OrExpr__Group_1__0)*
	{ after(grammarAccess.getOrExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpr__Group_1__0__Impl
	rule__OrExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExprAccess().getOrExprLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrExprAccess().getOrExprLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpr__Group_1__1__Impl
	rule__OrExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExprAccess().getOQuizSKeyword_1_1()); }
	'o quiz\u00E1s'
	{ after(grammarAccess.getOrExprAccess().getOQuizSKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExprAccess().getRightAssignment_1_2()); }
	(rule__OrExpr__RightAssignment_1_2)
	{ after(grammarAccess.getOrExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpr__Group__0__Impl
	rule__AndExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExprAccess().getEqualityExprParserRuleCall_0()); }
	ruleEqualityExpr
	{ after(grammarAccess.getAndExprAccess().getEqualityExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExprAccess().getGroup_1()); }
	(rule__AndExpr__Group_1__0)*
	{ after(grammarAccess.getAndExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpr__Group_1__0__Impl
	rule__AndExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExprAccess().getAndExprLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExprAccess().getAndExprLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpr__Group_1__1__Impl
	rule__AndExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExprAccess().getYTambiNKeyword_1_1()); }
	'y tambi\u00E9n'
	{ after(grammarAccess.getAndExprAccess().getYTambiNKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExprAccess().getRightAssignment_1_2()); }
	(rule__AndExpr__RightAssignment_1_2)
	{ after(grammarAccess.getAndExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpr__Group__0__Impl
	rule__EqualityExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExprAccess().getRelationalExprParserRuleCall_0()); }
	ruleRelationalExpr
	{ after(grammarAccess.getEqualityExprAccess().getRelationalExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExprAccess().getGroup_1()); }
	(rule__EqualityExpr__Group_1__0)*
	{ after(grammarAccess.getEqualityExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpr__Group_1__0__Impl
	rule__EqualityExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExprAccess().getEqualityExprLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEqualityExprAccess().getEqualityExprLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpr__Group_1__1__Impl
	rule__EqualityExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExprAccess().getAlternatives_1_1()); }
	(rule__EqualityExpr__Alternatives_1_1)
	{ after(grammarAccess.getEqualityExprAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExprAccess().getRightAssignment_1_2()); }
	(rule__EqualityExpr__RightAssignment_1_2)
	{ after(grammarAccess.getEqualityExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group__0__Impl
	rule__RelationalExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getAdditiveExprParserRuleCall_0()); }
	ruleAdditiveExpr
	{ after(grammarAccess.getRelationalExprAccess().getAdditiveExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getGroup_1()); }
	(rule__RelationalExpr__Group_1__0)*
	{ after(grammarAccess.getRelationalExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group_1__0__Impl
	rule__RelationalExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getRelationalExprLeftAction_1_0()); }
	()
	{ after(grammarAccess.getRelationalExprAccess().getRelationalExprLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group_1__1__Impl
	rule__RelationalExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getAlternatives_1_1()); }
	(rule__RelationalExpr__Alternatives_1_1)
	{ after(grammarAccess.getRelationalExprAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getRightAssignment_1_2()); }
	(rule__RelationalExpr__RightAssignment_1_2)
	{ after(grammarAccess.getRelationalExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpr__Group__0__Impl
	rule__AdditiveExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExprAccess().getMultiplicativeExprParserRuleCall_0()); }
	ruleMultiplicativeExpr
	{ after(grammarAccess.getAdditiveExprAccess().getMultiplicativeExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExprAccess().getGroup_1()); }
	(rule__AdditiveExpr__Group_1__0)*
	{ after(grammarAccess.getAdditiveExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpr__Group_1__0__Impl
	rule__AdditiveExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExprAccess().getAdditiveExprLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditiveExprAccess().getAdditiveExprLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpr__Group_1__1__Impl
	rule__AdditiveExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExprAccess().getAlternatives_1_1()); }
	(rule__AdditiveExpr__Alternatives_1_1)
	{ after(grammarAccess.getAdditiveExprAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExprAccess().getRightAssignment_1_2()); }
	(rule__AdditiveExpr__RightAssignment_1_2)
	{ after(grammarAccess.getAdditiveExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpr__Group__0__Impl
	rule__MultiplicativeExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExprAccess().getUnaryExprParserRuleCall_0()); }
	ruleUnaryExpr
	{ after(grammarAccess.getMultiplicativeExprAccess().getUnaryExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExprAccess().getGroup_1()); }
	(rule__MultiplicativeExpr__Group_1__0)*
	{ after(grammarAccess.getMultiplicativeExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpr__Group_1__0__Impl
	rule__MultiplicativeExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExprAccess().getMultiplicativeExprLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicativeExprAccess().getMultiplicativeExprLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpr__Group_1__1__Impl
	rule__MultiplicativeExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExprAccess().getAlternatives_1_1()); }
	(rule__MultiplicativeExpr__Alternatives_1_1)
	{ after(grammarAccess.getMultiplicativeExprAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExprAccess().getRightAssignment_1_2()); }
	(rule__MultiplicativeExpr__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicativeExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpr__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpr__Group_0__0__Impl
	rule__UnaryExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExprAccess().getNotExprAction_0_0()); }
	()
	{ after(grammarAccess.getUnaryExprAccess().getNotExprAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpr__Group_0__1__Impl
	rule__UnaryExpr__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExprAccess().getNoLoCreoKeyword_0_1()); }
	'no lo creo'
	{ after(grammarAccess.getUnaryExprAccess().getNoLoCreoKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpr__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExprAccess().getExprAssignment_0_2()); }
	(rule__UnaryExpr__ExprAssignment_0_2)
	{ after(grammarAccess.getUnaryExprAccess().getExprAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpr__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpr__Group_3__0__Impl
	rule__PrimaryExpr__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpr__Group_3__1__Impl
	rule__PrimaryExpr__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprAccess().getExpressionParserRuleCall_3_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExprAccess().getExpressionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpr__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getPrimaryExprAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntLiteral__Group__0__Impl
	rule__IntLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
	()
	{ after(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntLiteralAccess().getValueAssignment_1()); }
	(rule__IntLiteral__ValueAssignment_1)
	{ after(grammarAccess.getIntLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringLiteral__Group__0__Impl
	rule__StringLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
	()
	{ after(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
	(rule__StringLiteral__ValueAssignment_1)
	{ after(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanLiteral__Group__0__Impl
	rule__BooleanLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
	()
	{ after(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1()); }
	(rule__BooleanLiteral__ValueAssignment_1)
	{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condicional__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condicional__Group__0__Impl
	rule__Condicional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondicionalAccess().getAlternatives_0()); }
	(rule__Condicional__Alternatives_0)
	{ after(grammarAccess.getCondicionalAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condicional__Group__1__Impl
	rule__Condicional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondicionalAccess().getCondicionAssignment_1()); }
	(rule__Condicional__CondicionAssignment_1)
	{ after(grammarAccess.getCondicionalAccess().getCondicionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condicional__Group__2__Impl
	rule__Condicional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondicionalAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getCondicionalAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condicional__Group__3__Impl
	rule__Condicional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondicionalAccess().getAccionAssignment_3()); }
	(rule__Condicional__AccionAssignment_3)
	{ after(grammarAccess.getCondicionalAccess().getAccionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condicional__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondicionalAccess().getGroup_4()); }
	(rule__Condicional__Group_4__0)?
	{ after(grammarAccess.getCondicionalAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condicional__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condicional__Group_4__0__Impl
	rule__Condicional__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondicionalAccess().getYSiElDestinoDijeraLoContrarioKeyword_4_0()); }
	'Y si el destino dijera lo contrario,'
	{ after(grammarAccess.getCondicionalAccess().getYSiElDestinoDijeraLoContrarioKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condicional__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondicionalAccess().getAccionElseAssignment_4_1()); }
	(rule__Condicional__AccionElseAssignment_4_1)
	{ after(grammarAccess.getCondicionalAccess().getAccionElseAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BucleWhile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BucleWhile__Group__0__Impl
	rule__BucleWhile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleWhile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBucleWhileAccess().getAlternatives_0()); }
	(rule__BucleWhile__Alternatives_0)
	{ after(grammarAccess.getBucleWhileAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleWhile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BucleWhile__Group__1__Impl
	rule__BucleWhile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleWhile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBucleWhileAccess().getCondicionAssignment_1()); }
	(rule__BucleWhile__CondicionAssignment_1)
	{ after(grammarAccess.getBucleWhileAccess().getCondicionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleWhile__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BucleWhile__Group__2__Impl
	rule__BucleWhile__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleWhile__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBucleWhileAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getBucleWhileAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleWhile__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BucleWhile__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleWhile__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBucleWhileAccess().getAccionAssignment_3()); }
	(rule__BucleWhile__AccionAssignment_3)
	{ after(grammarAccess.getBucleWhileAccess().getAccionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BucleFor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BucleFor__Group__0__Impl
	rule__BucleFor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBucleForAccess().getAlternatives_0()); }
	(rule__BucleFor__Alternatives_0)
	{ after(grammarAccess.getBucleForAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BucleFor__Group__1__Impl
	rule__BucleFor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBucleForAccess().getCondicionAssignment_1()); }
	(rule__BucleFor__CondicionAssignment_1)
	{ after(grammarAccess.getBucleForAccess().getCondicionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BucleFor__Group__2__Impl
	rule__BucleFor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBucleForAccess().getHastaKeyword_2()); }
	'hasta'
	{ after(grammarAccess.getBucleForAccess().getHastaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BucleFor__Group__3__Impl
	rule__BucleFor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBucleForAccess().getAccionStopAssignment_3()); }
	(rule__BucleFor__AccionStopAssignment_3)
	{ after(grammarAccess.getBucleForAccess().getAccionStopAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BucleFor__Group__4__Impl
	rule__BucleFor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBucleForAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getBucleForAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BucleFor__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBucleForAccess().getAccionAssignment_5()); }
	(rule__BucleFor__AccionAssignment_5)
	{ after(grammarAccess.getBucleForAccess().getAccionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__CartasAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getCartasCartaParserRuleCall_2_0()); }
		ruleCarta
		{ after(grammarAccess.getProgramAccess().getCartasCartaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Carta__SaludoAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCartaAccess().getSaludoSaludoParserRuleCall_0_0()); }
		ruleSaludo
		{ after(grammarAccess.getCartaAccess().getSaludoSaludoParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Carta__CuerpoAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCartaAccess().getCuerpoCuerpoParserRuleCall_1_0()); }
		ruleCuerpo
		{ after(grammarAccess.getCartaAccess().getCuerpoCuerpoParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Carta__DespedidaAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCartaAccess().getDespedidaDespedidaParserRuleCall_2_0()); }
		ruleDespedida
		{ after(grammarAccess.getCartaAccess().getDespedidaDespedidaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Saludo__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSaludoAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSaludoAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Despedida__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDespedidaAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getDespedidaAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cuerpo__InstruccionesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCuerpoAccess().getInstruccionesInstruccionParserRuleCall_0()); }
		ruleInstruccion
		{ after(grammarAccess.getCuerpoAccess().getInstruccionesInstruccionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_2_0()); }
		ruleAndExpr
		{ after(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExprAccess().getRightEqualityExprParserRuleCall_1_2_0()); }
		ruleEqualityExpr
		{ after(grammarAccess.getAndExprAccess().getRightEqualityExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExprAccess().getRightRelationalExprParserRuleCall_1_2_0()); }
		ruleRelationalExpr
		{ after(grammarAccess.getEqualityExprAccess().getRightRelationalExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExprAccess().getRightAdditiveExprParserRuleCall_1_2_0()); }
		ruleAdditiveExpr
		{ after(grammarAccess.getRelationalExprAccess().getRightAdditiveExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExprAccess().getRightMultiplicativeExprParserRuleCall_1_2_0()); }
		ruleMultiplicativeExpr
		{ after(grammarAccess.getAdditiveExprAccess().getRightMultiplicativeExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExprAccess().getRightUnaryExprParserRuleCall_1_2_0()); }
		ruleUnaryExpr
		{ after(grammarAccess.getMultiplicativeExprAccess().getRightUnaryExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__ExprAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExprAccess().getExprPrimaryExprParserRuleCall_0_2_0()); }
		rulePrimaryExpr
		{ after(grammarAccess.getUnaryExprAccess().getExprPrimaryExprParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0()); }
		(rule__BooleanLiteral__ValueAlternatives_1_0)
		{ after(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableRefAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableRefAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__CondicionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondicionalAccess().getCondicionCondicionParserRuleCall_1_0()); }
		ruleCondicion
		{ after(grammarAccess.getCondicionalAccess().getCondicionCondicionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__AccionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondicionalAccess().getAccionInstruccionParserRuleCall_3_0()); }
		ruleInstruccion
		{ after(grammarAccess.getCondicionalAccess().getAccionInstruccionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condicional__AccionElseAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondicionalAccess().getAccionElseInstruccionParserRuleCall_4_1_0()); }
		ruleInstruccion
		{ after(grammarAccess.getCondicionalAccess().getAccionElseInstruccionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleWhile__CondicionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBucleWhileAccess().getCondicionCondicionParserRuleCall_1_0()); }
		ruleCondicion
		{ after(grammarAccess.getBucleWhileAccess().getCondicionCondicionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleWhile__AccionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBucleWhileAccess().getAccionInstruccionParserRuleCall_3_0()); }
		ruleInstruccion
		{ after(grammarAccess.getBucleWhileAccess().getAccionInstruccionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__CondicionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBucleForAccess().getCondicionCondicionParserRuleCall_1_0()); }
		ruleCondicion
		{ after(grammarAccess.getBucleForAccess().getCondicionCondicionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__AccionStopAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBucleForAccess().getAccionStopInstruccionParserRuleCall_3_0()); }
		ruleInstruccion
		{ after(grammarAccess.getBucleForAccess().getAccionStopInstruccionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BucleFor__AccionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBucleForAccess().getAccionInstruccionParserRuleCall_5_0()); }
		ruleInstruccion
		{ after(grammarAccess.getBucleForAccess().getAccionInstruccionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
