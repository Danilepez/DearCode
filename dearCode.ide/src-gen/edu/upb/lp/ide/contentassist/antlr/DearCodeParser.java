/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.upb.lp.ide.contentassist.antlr.internal.InternalDearCodeParser;
import edu.upb.lp.services.DearCodeGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DearCodeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DearCodeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DearCodeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSaludoAccess().getAlternatives_0(), "rule__Saludo__Alternatives_0");
			builder.put(grammarAccess.getInstruccionAccess().getAlternatives(), "rule__Instruccion__Alternatives");
			builder.put(grammarAccess.getDeclararAccess().getComentarioAlternatives_4_0(), "rule__Declarar__ComentarioAlternatives_4_0");
			builder.put(grammarAccess.getReasignarAccess().getComentarioAlternatives_4_0(), "rule__Reasignar__ComentarioAlternatives_4_0");
			builder.put(grammarAccess.getValorAccess().getAlternatives(), "rule__Valor__Alternatives");
			builder.put(grammarAccess.getNumeroLiteralAccess().getAlternatives(), "rule__NumeroLiteral__Alternatives");
			builder.put(grammarAccess.getSimpleAccess().getValueAlternatives_0(), "rule__Simple__ValueAlternatives_0");
			builder.put(grammarAccess.getMultiplicadorAccess().getAlternatives(), "rule__Multiplicador__Alternatives");
			builder.put(grammarAccess.getArticuloAccess().getAlternatives(), "rule__Articulo__Alternatives");
			builder.put(grammarAccess.getVerboDeclaracionAccess().getAlternatives(), "rule__VerboDeclaracion__Alternatives");
			builder.put(grammarAccess.getVerboReasignacionAccess().getAlternatives(), "rule__VerboReasignacion__Alternatives");
			builder.put(grammarAccess.getCartaAccess().getGroup(), "rule__Carta__Group__0");
			builder.put(grammarAccess.getSaludoAccess().getGroup(), "rule__Saludo__Group__0");
			builder.put(grammarAccess.getDespedidaAccess().getGroup(), "rule__Despedida__Group__0");
			builder.put(grammarAccess.getDeclararAccess().getGroup(), "rule__Declarar__Group__0");
			builder.put(grammarAccess.getReasignarAccess().getGroup(), "rule__Reasignar__Group__0");
			builder.put(grammarAccess.getCompuestoAccess().getGroup(), "rule__Compuesto__Group__0");
			builder.put(grammarAccess.getCompuestoAccess().getGroup_2(), "rule__Compuesto__Group_2__0");
			builder.put(grammarAccess.getMultiplicadorAccess().getGroup_0(), "rule__Multiplicador__Group_0__0");
			builder.put(grammarAccess.getMultiplicadorAccess().getGroup_1(), "rule__Multiplicador__Group_1__0");
			builder.put(grammarAccess.getMultiplicadorAccess().getGroup_2(), "rule__Multiplicador__Group_2__0");
			builder.put(grammarAccess.getVerboReasignacionAccess().getGroup_0(), "rule__VerboReasignacion__Group_0__0");
			builder.put(grammarAccess.getVerboReasignacionAccess().getGroup_1(), "rule__VerboReasignacion__Group_1__0");
			builder.put(grammarAccess.getVerboReasignacionAccess().getGroup_2(), "rule__VerboReasignacion__Group_2__0");
			builder.put(grammarAccess.getMI_IDAccess().getGroup(), "rule__MI_ID__Group__0");
			builder.put(grammarAccess.getProgramAccess().getCartasAssignment(), "rule__Program__CartasAssignment");
			builder.put(grammarAccess.getCartaAccess().getSaludoAssignment_0(), "rule__Carta__SaludoAssignment_0");
			builder.put(grammarAccess.getCartaAccess().getCuerpoAssignment_1(), "rule__Carta__CuerpoAssignment_1");
			builder.put(grammarAccess.getCartaAccess().getDespedidaAssignment_2(), "rule__Carta__DespedidaAssignment_2");
			builder.put(grammarAccess.getSaludoAccess().getNameAssignment_1(), "rule__Saludo__NameAssignment_1");
			builder.put(grammarAccess.getDespedidaAccess().getNameAssignment_1(), "rule__Despedida__NameAssignment_1");
			builder.put(grammarAccess.getCuerpoAccess().getInstruccionesAssignment(), "rule__Cuerpo__InstruccionesAssignment");
			builder.put(grammarAccess.getDeclararAccess().getVerboDeclAssignment_0(), "rule__Declarar__VerboDeclAssignment_0");
			builder.put(grammarAccess.getDeclararAccess().getArticuloAssignment_1(), "rule__Declarar__ArticuloAssignment_1");
			builder.put(grammarAccess.getDeclararAccess().getValorAssignment_2(), "rule__Declarar__ValorAssignment_2");
			builder.put(grammarAccess.getDeclararAccess().getSustantivoAssignment_3(), "rule__Declarar__SustantivoAssignment_3");
			builder.put(grammarAccess.getDeclararAccess().getComentarioAssignment_4(), "rule__Declarar__ComentarioAssignment_4");
			builder.put(grammarAccess.getReasignarAccess().getVerboReasAssignment_0(), "rule__Reasignar__VerboReasAssignment_0");
			builder.put(grammarAccess.getReasignarAccess().getSustantivoAssignment_1(), "rule__Reasignar__SustantivoAssignment_1");
			builder.put(grammarAccess.getReasignarAccess().getValorAssignment_3(), "rule__Reasignar__ValorAssignment_3");
			builder.put(grammarAccess.getReasignarAccess().getComentarioAssignment_4(), "rule__Reasignar__ComentarioAssignment_4");
			builder.put(grammarAccess.getSimpleAccess().getValueAssignment(), "rule__Simple__ValueAssignment");
			builder.put(grammarAccess.getCompuestoAccess().getCantidadAssignment_0(), "rule__Compuesto__CantidadAssignment_0");
			builder.put(grammarAccess.getCompuestoAccess().getMultiplicadorAssignment_1(), "rule__Compuesto__MultiplicadorAssignment_1");
			builder.put(grammarAccess.getCompuestoAccess().getRestoAssignment_2_1(), "rule__Compuesto__RestoAssignment_2_1");
			builder.put(grammarAccess.getMI_IDAccess().getNameAssignment_1(), "rule__MI_ID__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DearCodeGrammarAccess grammarAccess;

	@Override
	protected InternalDearCodeParser createParser() {
		InternalDearCodeParser result = new InternalDearCodeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DearCodeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DearCodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
