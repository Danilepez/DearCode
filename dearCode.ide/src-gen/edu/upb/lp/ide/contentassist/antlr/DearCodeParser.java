/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.upb.lp.ide.contentassist.antlr.internal.InternalDearCodeParser;
import edu.upb.lp.services.DearCodeGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DearCodeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DearCodeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DearCodeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstruccionAccess().getAlternatives(), "rule__Instruccion__Alternatives");
			builder.put(grammarAccess.getEqualityExprAccess().getAlternatives_1_1(), "rule__EqualityExpr__Alternatives_1_1");
			builder.put(grammarAccess.getRelationalExprAccess().getAlternatives_1_1(), "rule__RelationalExpr__Alternatives_1_1");
			builder.put(grammarAccess.getAdditiveExprAccess().getAlternatives_1_1(), "rule__AdditiveExpr__Alternatives_1_1");
			builder.put(grammarAccess.getMultiplicativeExprAccess().getAlternatives_1_1(), "rule__MultiplicativeExpr__Alternatives_1_1");
			builder.put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
			builder.put(grammarAccess.getPrimaryExprAccess().getAlternatives(), "rule__PrimaryExpr__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0(), "rule__BooleanLiteral__ValueAlternatives_1_0");
			builder.put(grammarAccess.getSpecialBooleanAccess().getAlternatives(), "rule__SpecialBoolean__Alternatives");
			builder.put(grammarAccess.getCondicionalAccess().getAlternatives_0(), "rule__Condicional__Alternatives_0");
			builder.put(grammarAccess.getBucleWhileAccess().getAlternatives_0(), "rule__BucleWhile__Alternatives_0");
			builder.put(grammarAccess.getBucleForAccess().getAlternatives_0(), "rule__BucleFor__Alternatives_0");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getCartaAccess().getGroup(), "rule__Carta__Group__0");
			builder.put(grammarAccess.getSaludoAccess().getGroup(), "rule__Saludo__Group__0");
			builder.put(grammarAccess.getDespedidaAccess().getGroup(), "rule__Despedida__Group__0");
			builder.put(grammarAccess.getOrExprAccess().getGroup(), "rule__OrExpr__Group__0");
			builder.put(grammarAccess.getOrExprAccess().getGroup_1(), "rule__OrExpr__Group_1__0");
			builder.put(grammarAccess.getAndExprAccess().getGroup(), "rule__AndExpr__Group__0");
			builder.put(grammarAccess.getAndExprAccess().getGroup_1(), "rule__AndExpr__Group_1__0");
			builder.put(grammarAccess.getEqualityExprAccess().getGroup(), "rule__EqualityExpr__Group__0");
			builder.put(grammarAccess.getEqualityExprAccess().getGroup_1(), "rule__EqualityExpr__Group_1__0");
			builder.put(grammarAccess.getRelationalExprAccess().getGroup(), "rule__RelationalExpr__Group__0");
			builder.put(grammarAccess.getRelationalExprAccess().getGroup_1(), "rule__RelationalExpr__Group_1__0");
			builder.put(grammarAccess.getAdditiveExprAccess().getGroup(), "rule__AdditiveExpr__Group__0");
			builder.put(grammarAccess.getAdditiveExprAccess().getGroup_1(), "rule__AdditiveExpr__Group_1__0");
			builder.put(grammarAccess.getMultiplicativeExprAccess().getGroup(), "rule__MultiplicativeExpr__Group__0");
			builder.put(grammarAccess.getMultiplicativeExprAccess().getGroup_1(), "rule__MultiplicativeExpr__Group_1__0");
			builder.put(grammarAccess.getUnaryExprAccess().getGroup_0(), "rule__UnaryExpr__Group_0__0");
			builder.put(grammarAccess.getPrimaryExprAccess().getGroup_3(), "rule__PrimaryExpr__Group_3__0");
			builder.put(grammarAccess.getIntLiteralAccess().getGroup(), "rule__IntLiteral__Group__0");
			builder.put(grammarAccess.getStringLiteralAccess().getGroup(), "rule__StringLiteral__Group__0");
			builder.put(grammarAccess.getBooleanLiteralAccess().getGroup(), "rule__BooleanLiteral__Group__0");
			builder.put(grammarAccess.getCondicionalAccess().getGroup(), "rule__Condicional__Group__0");
			builder.put(grammarAccess.getCondicionalAccess().getGroup_4(), "rule__Condicional__Group_4__0");
			builder.put(grammarAccess.getBucleWhileAccess().getGroup(), "rule__BucleWhile__Group__0");
			builder.put(grammarAccess.getBucleForAccess().getGroup(), "rule__BucleFor__Group__0");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_0(), "rule__Program__NameAssignment_0");
			builder.put(grammarAccess.getProgramAccess().getCartasAssignment_2(), "rule__Program__CartasAssignment_2");
			builder.put(grammarAccess.getCartaAccess().getSaludoAssignment_0(), "rule__Carta__SaludoAssignment_0");
			builder.put(grammarAccess.getCartaAccess().getCuerpoAssignment_1(), "rule__Carta__CuerpoAssignment_1");
			builder.put(grammarAccess.getCartaAccess().getDespedidaAssignment_2(), "rule__Carta__DespedidaAssignment_2");
			builder.put(grammarAccess.getSaludoAccess().getNameAssignment_1(), "rule__Saludo__NameAssignment_1");
			builder.put(grammarAccess.getDespedidaAccess().getNameAssignment_2(), "rule__Despedida__NameAssignment_2");
			builder.put(grammarAccess.getCuerpoAccess().getInstruccionesAssignment(), "rule__Cuerpo__InstruccionesAssignment");
			builder.put(grammarAccess.getOrExprAccess().getRightAssignment_1_2(), "rule__OrExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExprAccess().getRightAssignment_1_2(), "rule__AndExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualityExprAccess().getRightAssignment_1_2(), "rule__EqualityExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getRelationalExprAccess().getRightAssignment_1_2(), "rule__RelationalExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getAdditiveExprAccess().getRightAssignment_1_2(), "rule__AdditiveExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicativeExprAccess().getRightAssignment_1_2(), "rule__MultiplicativeExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getUnaryExprAccess().getExprAssignment_0_2(), "rule__UnaryExpr__ExprAssignment_0_2");
			builder.put(grammarAccess.getIntLiteralAccess().getValueAssignment_1(), "rule__IntLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment_1(), "rule__StringLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1(), "rule__BooleanLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getVariableRefAccess().getNameAssignment(), "rule__VariableRef__NameAssignment");
			builder.put(grammarAccess.getCondicionalAccess().getCondicionAssignment_1(), "rule__Condicional__CondicionAssignment_1");
			builder.put(grammarAccess.getCondicionalAccess().getAccionAssignment_3(), "rule__Condicional__AccionAssignment_3");
			builder.put(grammarAccess.getCondicionalAccess().getAccionElseAssignment_4_1(), "rule__Condicional__AccionElseAssignment_4_1");
			builder.put(grammarAccess.getBucleWhileAccess().getCondicionAssignment_1(), "rule__BucleWhile__CondicionAssignment_1");
			builder.put(grammarAccess.getBucleWhileAccess().getAccionAssignment_3(), "rule__BucleWhile__AccionAssignment_3");
			builder.put(grammarAccess.getBucleForAccess().getCondicionAssignment_1(), "rule__BucleFor__CondicionAssignment_1");
			builder.put(grammarAccess.getBucleForAccess().getAccionStopAssignment_3(), "rule__BucleFor__AccionStopAssignment_3");
			builder.put(grammarAccess.getBucleForAccess().getAccionAssignment_5(), "rule__BucleFor__AccionAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DearCodeGrammarAccess grammarAccess;

	@Override
	protected InternalDearCodeParser createParser() {
		InternalDearCodeParser result = new InternalDearCodeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DearCodeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DearCodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
