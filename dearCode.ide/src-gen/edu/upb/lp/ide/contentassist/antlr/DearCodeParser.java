/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.upb.lp.ide.contentassist.antlr.internal.InternalDearCodeParser;
import edu.upb.lp.services.DearCodeGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DearCodeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DearCodeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DearCodeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSaludoAccess().getAlternatives_0(), "rule__Saludo__Alternatives_0");
			builder.put(grammarAccess.getDespedidaAccess().getAlternatives_0(), "rule__Despedida__Alternatives_0");
			builder.put(grammarAccess.getInstruccionAccess().getAlternatives(), "rule__Instruccion__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getEntradaAccess().getAlternatives_0(), "rule__Entrada__Alternatives_0");
			builder.put(grammarAccess.getEntradaAccess().getAlternatives_2(), "rule__Entrada__Alternatives_2");
			builder.put(grammarAccess.getSalidaAccess().getAlternatives_0(), "rule__Salida__Alternatives_0");
			builder.put(grammarAccess.getElementoBloqueAccess().getAlternatives(), "rule__ElementoBloque__Alternatives");
			builder.put(grammarAccess.getCondicionalAccess().getAlternatives_0(), "rule__Condicional__Alternatives_0");
			builder.put(grammarAccess.getCondicionalAccess().getAlternatives_4(), "rule__Condicional__Alternatives_4");
			builder.put(grammarAccess.getCondicionalAccess().getAlternatives_6_0(), "rule__Condicional__Alternatives_6_0");
			builder.put(grammarAccess.getCondicionalAccess().getAlternatives_7(), "rule__Condicional__Alternatives_7");
			builder.put(grammarAccess.getBucleWhileAccess().getAlternatives_0(), "rule__BucleWhile__Alternatives_0");
			builder.put(grammarAccess.getBucleWhileAccess().getAlternatives_3(), "rule__BucleWhile__Alternatives_3");
			builder.put(grammarAccess.getBucleWhileAccess().getAlternatives_5(), "rule__BucleWhile__Alternatives_5");
			builder.put(grammarAccess.getBucleForAccess().getAlternatives_0(), "rule__BucleFor__Alternatives_0");
			builder.put(grammarAccess.getBucleForAccess().getAlternatives_7(), "rule__BucleFor__Alternatives_7");
			builder.put(grammarAccess.getBucleForAccess().getAlternatives_9(), "rule__BucleFor__Alternatives_9");
			builder.put(grammarAccess.getFuncionAccess().getAlternatives_0(), "rule__Funcion__Alternatives_0");
			builder.put(grammarAccess.getFuncionAccess().getAlternatives_2_0(), "rule__Funcion__Alternatives_2_0");
			builder.put(grammarAccess.getFuncionAccess().getAlternatives_2_2_0(), "rule__Funcion__Alternatives_2_2_0");
			builder.put(grammarAccess.getFuncionAccess().getAlternatives_3(), "rule__Funcion__Alternatives_3");
			builder.put(grammarAccess.getFuncionAccess().getAlternatives_5(), "rule__Funcion__Alternatives_5");
			builder.put(grammarAccess.getFuncionAccess().getAlternatives_7(), "rule__Funcion__Alternatives_7");
			builder.put(grammarAccess.getReturnAccess().getAlternatives_0(), "rule__Return__Alternatives_0");
			builder.put(grammarAccess.getReturnAccess().getAlternatives_2(), "rule__Return__Alternatives_2");
			builder.put(grammarAccess.getOrExpressionAccess().getAlternatives_1_1(), "rule__OrExpression__Alternatives_1_1");
			builder.put(grammarAccess.getAndExpressionAccess().getAlternatives_1_1(), "rule__AndExpression__Alternatives_1_1");
			builder.put(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0(), "rule__EqualityExpression__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getOpAlternatives_1_1_0(), "rule__RelationalExpression__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getOpAlternatives_1_1_0(), "rule__AdditiveExpression__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_1_0(), "rule__MultiplicativeExpression__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getAlternatives(), "rule__UnaryExpression__Alternatives");
			builder.put(grammarAccess.getUnaryExpressionAccess().getOpAlternatives_0_1_0(), "rule__UnaryExpression__OpAlternatives_0_1_0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getValueBooleanAlternatives_3_1_0(), "rule__PrimaryExpression__ValueBooleanAlternatives_3_1_0");
			builder.put(grammarAccess.getFunctionCallAccess().getAlternatives_1(), "rule__FunctionCall__Alternatives_1");
			builder.put(grammarAccess.getFunctionCallAccess().getAlternatives_3_0(), "rule__FunctionCall__Alternatives_3_0");
			builder.put(grammarAccess.getFunctionCallAccess().getAlternatives_3_2(), "rule__FunctionCall__Alternatives_3_2");
			builder.put(grammarAccess.getVerboDeclaracionAccess().getAlternatives(), "rule__VerboDeclaracion__Alternatives");
			builder.put(grammarAccess.getVerboReasignacionAccess().getAlternatives(), "rule__VerboReasignacion__Alternatives");
			builder.put(grammarAccess.getArticuloAccess().getAlternatives(), "rule__Articulo__Alternatives");
			builder.put(grammarAccess.getCartaAccess().getGroup(), "rule__Carta__Group__0");
			builder.put(grammarAccess.getSaludoAccess().getGroup(), "rule__Saludo__Group__0");
			builder.put(grammarAccess.getDespedidaAccess().getGroup(), "rule__Despedida__Group__0");
			builder.put(grammarAccess.getDeclararAccess().getGroup(), "rule__Declarar__Group__0");
			builder.put(grammarAccess.getReasignarAccess().getGroup(), "rule__Reasignar__Group__0");
			builder.put(grammarAccess.getEntradaAccess().getGroup(), "rule__Entrada__Group__0");
			builder.put(grammarAccess.getSalidaAccess().getGroup(), "rule__Salida__Group__0");
			builder.put(grammarAccess.getCondicionalAccess().getGroup(), "rule__Condicional__Group__0");
			builder.put(grammarAccess.getCondicionalAccess().getGroup_6(), "rule__Condicional__Group_6__0");
			builder.put(grammarAccess.getCondicionalAccess().getGroup_6_0_0(), "rule__Condicional__Group_6_0_0__0");
			builder.put(grammarAccess.getCondicionalAccess().getGroup_6_0_1(), "rule__Condicional__Group_6_0_1__0");
			builder.put(grammarAccess.getCondicionalAccess().getGroup_6_0_2(), "rule__Condicional__Group_6_0_2__0");
			builder.put(grammarAccess.getBucleWhileAccess().getGroup(), "rule__BucleWhile__Group__0");
			builder.put(grammarAccess.getBucleForAccess().getGroup(), "rule__BucleFor__Group__0");
			builder.put(grammarAccess.getBucleForAccess().getGroup_6(), "rule__BucleFor__Group_6__0");
			builder.put(grammarAccess.getFuncionAccess().getGroup(), "rule__Funcion__Group__0");
			builder.put(grammarAccess.getFuncionAccess().getGroup_2(), "rule__Funcion__Group_2__0");
			builder.put(grammarAccess.getFuncionAccess().getGroup_2_2(), "rule__Funcion__Group_2_2__0");
			builder.put(grammarAccess.getParametroDeclAccess().getGroup(), "rule__ParametroDecl__Group__0");
			builder.put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup_1(), "rule__EqualityExpression__Group_1__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getGroup_0(), "rule__UnaryExpression__Group_0__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_2(), "rule__PrimaryExpression__Group_2__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_3(), "rule__PrimaryExpression__Group_3__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_4(), "rule__PrimaryExpression__Group_4__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_3(), "rule__FunctionCall__Group_3__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_3_1(), "rule__FunctionCall__Group_3_1__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_3_1_1(), "rule__FunctionCall__Group_3_1_1__0");
			builder.put(grammarAccess.getProgramAccess().getCartaAssignment(), "rule__Program__CartaAssignment");
			builder.put(grammarAccess.getCartaAccess().getSaludoAssignment_0(), "rule__Carta__SaludoAssignment_0");
			builder.put(grammarAccess.getCartaAccess().getCuerpoAssignment_1(), "rule__Carta__CuerpoAssignment_1");
			builder.put(grammarAccess.getCartaAccess().getDespedidaAssignment_2(), "rule__Carta__DespedidaAssignment_2");
			builder.put(grammarAccess.getSaludoAccess().getNameAssignment_1(), "rule__Saludo__NameAssignment_1");
			builder.put(grammarAccess.getDespedidaAccess().getNameAssignment_1(), "rule__Despedida__NameAssignment_1");
			builder.put(grammarAccess.getCuerpoAccess().getInstruccionesAssignment(), "rule__Cuerpo__InstruccionesAssignment");
			builder.put(grammarAccess.getDeclararAccess().getVerboDeclAssignment_0(), "rule__Declarar__VerboDeclAssignment_0");
			builder.put(grammarAccess.getDeclararAccess().getArticuloAssignment_1(), "rule__Declarar__ArticuloAssignment_1");
			builder.put(grammarAccess.getDeclararAccess().getTipoAssignment_2(), "rule__Declarar__TipoAssignment_2");
			builder.put(grammarAccess.getDeclararAccess().getSustantivoAssignment_3(), "rule__Declarar__SustantivoAssignment_3");
			builder.put(grammarAccess.getDeclararAccess().getPreComentarioAssignment_4(), "rule__Declarar__PreComentarioAssignment_4");
			builder.put(grammarAccess.getDeclararAccess().getValorAssignment_5(), "rule__Declarar__ValorAssignment_5");
			builder.put(grammarAccess.getDeclararAccess().getPostComentarioAssignment_6(), "rule__Declarar__PostComentarioAssignment_6");
			builder.put(grammarAccess.getReasignarAccess().getVerboReasAssignment_0(), "rule__Reasignar__VerboReasAssignment_0");
			builder.put(grammarAccess.getReasignarAccess().getPreComentarioAssignment_1(), "rule__Reasignar__PreComentarioAssignment_1");
			builder.put(grammarAccess.getReasignarAccess().getSustantivoAssignment_2(), "rule__Reasignar__SustantivoAssignment_2");
			builder.put(grammarAccess.getReasignarAccess().getPostComentarioAssignment_3(), "rule__Reasignar__PostComentarioAssignment_3");
			builder.put(grammarAccess.getReasignarAccess().getValorAssignment_4(), "rule__Reasignar__ValorAssignment_4");
			builder.put(grammarAccess.getReasignarAccess().getComentarioAssignment_5(), "rule__Reasignar__ComentarioAssignment_5");
			builder.put(grammarAccess.getEntradaAccess().getVariableAssignment_1(), "rule__Entrada__VariableAssignment_1");
			builder.put(grammarAccess.getSalidaAccess().getExpresionAssignment_1(), "rule__Salida__ExpresionAssignment_1");
			builder.put(grammarAccess.getCondicionalAccess().getCondicionAssignment_1(), "rule__Condicional__CondicionAssignment_1");
			builder.put(grammarAccess.getCondicionalAccess().getCommentAssignment_3(), "rule__Condicional__CommentAssignment_3");
			builder.put(grammarAccess.getCondicionalAccess().getInstruccionesThenAssignment_5(), "rule__Condicional__InstruccionesThenAssignment_5");
			builder.put(grammarAccess.getCondicionalAccess().getInstruccionesElseAssignment_6_1(), "rule__Condicional__InstruccionesElseAssignment_6_1");
			builder.put(grammarAccess.getBucleWhileAccess().getCondicionAssignment_1(), "rule__BucleWhile__CondicionAssignment_1");
			builder.put(grammarAccess.getBucleWhileAccess().getLoopBodyAssignment_4(), "rule__BucleWhile__LoopBodyAssignment_4");
			builder.put(grammarAccess.getBucleForAccess().getVariableAssignment_1(), "rule__BucleFor__VariableAssignment_1");
			builder.put(grammarAccess.getBucleForAccess().getInicioAssignment_3(), "rule__BucleFor__InicioAssignment_3");
			builder.put(grammarAccess.getBucleForAccess().getFinAssignment_5(), "rule__BucleFor__FinAssignment_5");
			builder.put(grammarAccess.getBucleForAccess().getPasoAssignment_6_1(), "rule__BucleFor__PasoAssignment_6_1");
			builder.put(grammarAccess.getBucleForAccess().getLoopBodyAssignment_8(), "rule__BucleFor__LoopBodyAssignment_8");
			builder.put(grammarAccess.getFuncionAccess().getNameAssignment_1(), "rule__Funcion__NameAssignment_1");
			builder.put(grammarAccess.getFuncionAccess().getParametrosAssignment_2_1(), "rule__Funcion__ParametrosAssignment_2_1");
			builder.put(grammarAccess.getFuncionAccess().getParametrosAssignment_2_2_1(), "rule__Funcion__ParametrosAssignment_2_2_1");
			builder.put(grammarAccess.getFuncionAccess().getTipoAssignment_4(), "rule__Funcion__TipoAssignment_4");
			builder.put(grammarAccess.getFuncionAccess().getInstruccionesAssignment_6(), "rule__Funcion__InstruccionesAssignment_6");
			builder.put(grammarAccess.getParametroDeclAccess().getTipoAssignment_0(), "rule__ParametroDecl__TipoAssignment_0");
			builder.put(grammarAccess.getParametroDeclAccess().getCommentAssignment_1(), "rule__ParametroDecl__CommentAssignment_1");
			builder.put(grammarAccess.getParametroDeclAccess().getNameAssignment_2(), "rule__ParametroDecl__NameAssignment_2");
			builder.put(grammarAccess.getReturnAccess().getExpresionAssignment_1(), "rule__Return__ExpresionAssignment_1");
			builder.put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1(), "rule__EqualityExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2(), "rule__EqualityExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1(), "rule__RelationalExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2(), "rule__RelationalExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1(), "rule__AdditiveExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2(), "rule__AdditiveExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1(), "rule__MultiplicativeExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2(), "rule__MultiplicativeExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1(), "rule__UnaryExpression__OpAssignment_0_1");
			builder.put(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_0_2(), "rule__UnaryExpression__ExpressionAssignment_0_2");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getValueIntAssignment_1_1(), "rule__PrimaryExpression__ValueIntAssignment_1_1");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getValueStringAssignment_2_1(), "rule__PrimaryExpression__ValueStringAssignment_2_1");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getValueBooleanAssignment_3_1(), "rule__PrimaryExpression__ValueBooleanAssignment_3_1");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getNameAssignment_4_1(), "rule__PrimaryExpression__NameAssignment_4_1");
			builder.put(grammarAccess.getFunctionCallAccess().getNameFuncionAssignment_2(), "rule__FunctionCall__NameFuncionAssignment_2");
			builder.put(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1_0(), "rule__FunctionCall__ArgsAssignment_3_1_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1_1_1(), "rule__FunctionCall__ArgsAssignment_3_1_1_1");
			builder.put(grammarAccess.getCommentAccess().getValueAssignment(), "rule__Comment__ValueAssignment");
			builder.put(grammarAccess.getMI_IDAccess().getNameAssignment(), "rule__MI_ID__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DearCodeGrammarAccess grammarAccess;

	@Override
	protected InternalDearCodeParser createParser() {
		InternalDearCodeParser result = new InternalDearCodeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DearCodeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DearCodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
