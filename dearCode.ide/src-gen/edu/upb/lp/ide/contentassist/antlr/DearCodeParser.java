/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.upb.lp.ide.contentassist.antlr.internal.InternalDearCodeParser;
import edu.upb.lp.services.DearCodeGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DearCodeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DearCodeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DearCodeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSaludoAccess().getAlternatives_0(), "rule__Saludo__Alternatives_0");
			builder.put(grammarAccess.getInstruccionAccess().getAlternatives(), "rule__Instruccion__Alternatives");
			builder.put(grammarAccess.getDeclararAccess().getComentarioAlternatives_5_0(), "rule__Declarar__ComentarioAlternatives_5_0");
			builder.put(grammarAccess.getReasignarAccess().getComentarioAlternatives_5_0(), "rule__Reasignar__ComentarioAlternatives_5_0");
			builder.put(grammarAccess.getValorAccess().getAlternatives(), "rule__Valor__Alternatives");
			builder.put(grammarAccess.getNumeroLiteralAccess().getAlternatives(), "rule__NumeroLiteral__Alternatives");
			builder.put(grammarAccess.getSimpleAccess().getValueAlternatives_0(), "rule__Simple__ValueAlternatives_0");
			builder.put(grammarAccess.getMultiplicadorAccess().getAlternatives(), "rule__Multiplicador__Alternatives");
			builder.put(grammarAccess.getArticuloAccess().getAlternatives(), "rule__Articulo__Alternatives");
			builder.put(grammarAccess.getVerboDeclaracionAccess().getAlternatives(), "rule__VerboDeclaracion__Alternatives");
			builder.put(grammarAccess.getVerboReasignacionAccess().getAlternatives(), "rule__VerboReasignacion__Alternatives");
			builder.put(grammarAccess.getEqualityExprAccess().getAlternatives_1_1(), "rule__EqualityExpr__Alternatives_1_1");
			builder.put(grammarAccess.getRelationalOpAccess().getAlternatives(), "rule__RelationalOp__Alternatives");
			builder.put(grammarAccess.getAdditiveExprAccess().getAlternatives_1_1(), "rule__AdditiveExpr__Alternatives_1_1");
			builder.put(grammarAccess.getMultiplicativeExprAccess().getAlternatives_1_1(), "rule__MultiplicativeExpr__Alternatives_1_1");
			builder.put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
			builder.put(grammarAccess.getPrimaryExprAccess().getAlternatives(), "rule__PrimaryExpr__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0(), "rule__BooleanLiteral__ValueAlternatives_1_0");
			builder.put(grammarAccess.getSpecialBooleanAccess().getAlternatives(), "rule__SpecialBoolean__Alternatives");
			builder.put(grammarAccess.getBucleWhileAccess().getAlternatives_0(), "rule__BucleWhile__Alternatives_0");
			builder.put(grammarAccess.getBucleForAccess().getAlternatives_0(), "rule__BucleFor__Alternatives_0");
			builder.put(grammarAccess.getFuncionAccess().getAlternatives_0_0(), "rule__Funcion__Alternatives_0_0");
			builder.put(grammarAccess.getCartaAccess().getGroup(), "rule__Carta__Group__0");
			builder.put(grammarAccess.getSaludoAccess().getGroup(), "rule__Saludo__Group__0");
			builder.put(grammarAccess.getDespedidaAccess().getGroup(), "rule__Despedida__Group__0");
			builder.put(grammarAccess.getDeclararAccess().getGroup(), "rule__Declarar__Group__0");
			builder.put(grammarAccess.getReasignarAccess().getGroup(), "rule__Reasignar__Group__0");
			builder.put(grammarAccess.getEntradaAccess().getGroup(), "rule__Entrada__Group__0");
			builder.put(grammarAccess.getSalidaAccess().getGroup(), "rule__Salida__Group__0");
			builder.put(grammarAccess.getCompuestoAccess().getGroup(), "rule__Compuesto__Group__0");
			builder.put(grammarAccess.getCompuestoAccess().getGroup_2(), "rule__Compuesto__Group_2__0");
			builder.put(grammarAccess.getMultiplicadorAccess().getGroup_0(), "rule__Multiplicador__Group_0__0");
			builder.put(grammarAccess.getMultiplicadorAccess().getGroup_1(), "rule__Multiplicador__Group_1__0");
			builder.put(grammarAccess.getMultiplicadorAccess().getGroup_2(), "rule__Multiplicador__Group_2__0");
			builder.put(grammarAccess.getOrExprAccess().getGroup(), "rule__OrExpr__Group__0");
			builder.put(grammarAccess.getOrExprAccess().getGroup_1(), "rule__OrExpr__Group_1__0");
			builder.put(grammarAccess.getAndExprAccess().getGroup(), "rule__AndExpr__Group__0");
			builder.put(grammarAccess.getAndExprAccess().getGroup_1(), "rule__AndExpr__Group_1__0");
			builder.put(grammarAccess.getEqualityExprAccess().getGroup(), "rule__EqualityExpr__Group__0");
			builder.put(grammarAccess.getEqualityExprAccess().getGroup_1(), "rule__EqualityExpr__Group_1__0");
			builder.put(grammarAccess.getRelationalExprAccess().getGroup(), "rule__RelationalExpr__Group__0");
			builder.put(grammarAccess.getRelationalExprAccess().getGroup_1(), "rule__RelationalExpr__Group_1__0");
			builder.put(grammarAccess.getAdditiveExprAccess().getGroup(), "rule__AdditiveExpr__Group__0");
			builder.put(grammarAccess.getAdditiveExprAccess().getGroup_1(), "rule__AdditiveExpr__Group_1__0");
			builder.put(grammarAccess.getMultiplicativeExprAccess().getGroup(), "rule__MultiplicativeExpr__Group__0");
			builder.put(grammarAccess.getMultiplicativeExprAccess().getGroup_1(), "rule__MultiplicativeExpr__Group_1__0");
			builder.put(grammarAccess.getUnaryExprAccess().getGroup_0(), "rule__UnaryExpr__Group_0__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_2(), "rule__FunctionCall__Group_2__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_2_1(), "rule__FunctionCall__Group_2_1__0");
			builder.put(grammarAccess.getPrimaryExprAccess().getGroup_4(), "rule__PrimaryExpr__Group_4__0");
			builder.put(grammarAccess.getIntLiteralAccess().getGroup(), "rule__IntLiteral__Group__0");
			builder.put(grammarAccess.getStringLiteralAccess().getGroup(), "rule__StringLiteral__Group__0");
			builder.put(grammarAccess.getBooleanLiteralAccess().getGroup(), "rule__BooleanLiteral__Group__0");
			builder.put(grammarAccess.getCondicionalAccess().getGroup(), "rule__Condicional__Group__0");
			builder.put(grammarAccess.getCondicionalAccess().getGroup_5(), "rule__Condicional__Group_5__0");
			builder.put(grammarAccess.getBucleWhileAccess().getGroup(), "rule__BucleWhile__Group__0");
			builder.put(grammarAccess.getBucleForAccess().getGroup(), "rule__BucleFor__Group__0");
			builder.put(grammarAccess.getFuncionAccess().getGroup(), "rule__Funcion__Group__0");
			builder.put(grammarAccess.getFuncionAccess().getGroup_0(), "rule__Funcion__Group_0__0");
			builder.put(grammarAccess.getFuncionAccess().getGroup_1(), "rule__Funcion__Group_1__0");
			builder.put(grammarAccess.getFuncionAccess().getGroup_1_2(), "rule__Funcion__Group_1_2__0");
			builder.put(grammarAccess.getFuncionAccess().getGroup_4(), "rule__Funcion__Group_4__0");
			builder.put(grammarAccess.getProgramAccess().getCartasAssignment(), "rule__Program__CartasAssignment");
			builder.put(grammarAccess.getCartaAccess().getSaludoAssignment_0(), "rule__Carta__SaludoAssignment_0");
			builder.put(grammarAccess.getCartaAccess().getCuerpoAssignment_1(), "rule__Carta__CuerpoAssignment_1");
			builder.put(grammarAccess.getCartaAccess().getDespedidaAssignment_2(), "rule__Carta__DespedidaAssignment_2");
			builder.put(grammarAccess.getSaludoAccess().getNameAssignment_1(), "rule__Saludo__NameAssignment_1");
			builder.put(grammarAccess.getDespedidaAccess().getNameAssignment_1(), "rule__Despedida__NameAssignment_1");
			builder.put(grammarAccess.getCuerpoAccess().getInstruccionesAssignment(), "rule__Cuerpo__InstruccionesAssignment");
			builder.put(grammarAccess.getDeclararAccess().getVerboDeclAssignment_0(), "rule__Declarar__VerboDeclAssignment_0");
			builder.put(grammarAccess.getDeclararAccess().getArticuloAssignment_1(), "rule__Declarar__ArticuloAssignment_1");
			builder.put(grammarAccess.getDeclararAccess().getSustantivoAssignment_2(), "rule__Declarar__SustantivoAssignment_2");
			builder.put(grammarAccess.getDeclararAccess().getConectorAssignment_3(), "rule__Declarar__ConectorAssignment_3");
			builder.put(grammarAccess.getDeclararAccess().getValorAssignment_4(), "rule__Declarar__ValorAssignment_4");
			builder.put(grammarAccess.getDeclararAccess().getComentarioAssignment_5(), "rule__Declarar__ComentarioAssignment_5");
			builder.put(grammarAccess.getReasignarAccess().getVerboReasAssignment_0(), "rule__Reasignar__VerboReasAssignment_0");
			builder.put(grammarAccess.getReasignarAccess().getConectorAssignment_1(), "rule__Reasignar__ConectorAssignment_1");
			builder.put(grammarAccess.getReasignarAccess().getSustantivoAssignment_2(), "rule__Reasignar__SustantivoAssignment_2");
			builder.put(grammarAccess.getReasignarAccess().getValorAssignment_4(), "rule__Reasignar__ValorAssignment_4");
			builder.put(grammarAccess.getReasignarAccess().getComentarioAssignment_5(), "rule__Reasignar__ComentarioAssignment_5");
			builder.put(grammarAccess.getEntradaAccess().getVariableAssignment_1(), "rule__Entrada__VariableAssignment_1");
			builder.put(grammarAccess.getSalidaAccess().getExpresionAssignment_1(), "rule__Salida__ExpresionAssignment_1");
			builder.put(grammarAccess.getSimpleAccess().getValueAssignment(), "rule__Simple__ValueAssignment");
			builder.put(grammarAccess.getCompuestoAccess().getCantidadAssignment_0(), "rule__Compuesto__CantidadAssignment_0");
			builder.put(grammarAccess.getCompuestoAccess().getMultiplicadorAssignment_1(), "rule__Compuesto__MultiplicadorAssignment_1");
			builder.put(grammarAccess.getCompuestoAccess().getRestoAssignment_2_1(), "rule__Compuesto__RestoAssignment_2_1");
			builder.put(grammarAccess.getMI_IDAccess().getNameAssignment(), "rule__MI_ID__NameAssignment");
			builder.put(grammarAccess.getOrExprAccess().getRightAssignment_1_2(), "rule__OrExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExprAccess().getRightAssignment_1_2(), "rule__AndExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualityExprAccess().getRightAssignment_1_2(), "rule__EqualityExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getRelationalExprAccess().getOpAssignment_1_1(), "rule__RelationalExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getRelationalExprAccess().getRightAssignment_1_2(), "rule__RelationalExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getAdditiveExprAccess().getRightAssignment_1_2(), "rule__AdditiveExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicativeExprAccess().getRightAssignment_1_2(), "rule__MultiplicativeExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getUnaryExprAccess().getExprAssignment_0_2(), "rule__UnaryExpr__ExprAssignment_0_2");
			builder.put(grammarAccess.getFunctionCallAccess().getNameAssignment_0(), "rule__FunctionCall__NameAssignment_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgsAssignment_2_0(), "rule__FunctionCall__ArgsAssignment_2_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgsAssignment_2_1_1(), "rule__FunctionCall__ArgsAssignment_2_1_1");
			builder.put(grammarAccess.getIntLiteralAccess().getValueAssignment_1(), "rule__IntLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment_1(), "rule__StringLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1(), "rule__BooleanLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getVariableRefAccess().getNameAssignment(), "rule__VariableRef__NameAssignment");
			builder.put(grammarAccess.getCondicionalAccess().getCondicionAssignment_1(), "rule__Condicional__CondicionAssignment_1");
			builder.put(grammarAccess.getCondicionalAccess().getInstruccionesThenAssignment_4(), "rule__Condicional__InstruccionesThenAssignment_4");
			builder.put(grammarAccess.getCondicionalAccess().getInstruccionesElseAssignment_5_2(), "rule__Condicional__InstruccionesElseAssignment_5_2");
			builder.put(grammarAccess.getBucleWhileAccess().getCondicionAssignment_1(), "rule__BucleWhile__CondicionAssignment_1");
			builder.put(grammarAccess.getBucleWhileAccess().getInstruccionesAssignment_4(), "rule__BucleWhile__InstruccionesAssignment_4");
			builder.put(grammarAccess.getBucleForAccess().getCondicionAssignment_1(), "rule__BucleFor__CondicionAssignment_1");
			builder.put(grammarAccess.getBucleForAccess().getAccionStopAssignment_3(), "rule__BucleFor__AccionStopAssignment_3");
			builder.put(grammarAccess.getBucleForAccess().getInstruccionesAssignment_6(), "rule__BucleFor__InstruccionesAssignment_6");
			builder.put(grammarAccess.getFuncionAccess().getNameAssignment_0_1(), "rule__Funcion__NameAssignment_0_1");
			builder.put(grammarAccess.getFuncionAccess().getParametrosAssignment_1_1(), "rule__Funcion__ParametrosAssignment_1_1");
			builder.put(grammarAccess.getFuncionAccess().getParametrosAssignment_1_2_1(), "rule__Funcion__ParametrosAssignment_1_2_1");
			builder.put(grammarAccess.getFuncionAccess().getInstruccionesAssignment_3(), "rule__Funcion__InstruccionesAssignment_3");
			builder.put(grammarAccess.getFuncionAccess().getRetornoAssignment_4_1(), "rule__Funcion__RetornoAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DearCodeGrammarAccess grammarAccess;

	@Override
	protected InternalDearCodeParser createParser() {
		InternalDearCodeParser result = new InternalDearCodeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DearCodeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DearCodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
